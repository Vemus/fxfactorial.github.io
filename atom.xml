<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>hyegar.com - All posts</title>
        <link>http://hyegar.com</link>
        <description><![CDATA[Personal blog of Edgar Aroutiounian]]></description>
        <atom:link href="http://hyegar.com/atom.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Fri, 26 Feb 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>Let's make a webkit browser in Objective-C++</title>
    <link>http://hyegar.com/2016/02/26/lets-make-a-browser/index.html</link>
    <description><![CDATA[<p>This is a short post showing you how to write a simple <code>OS X</code> based web browser using <code>Objective-C</code> in just 80 lines of code and with no XCode. Its very valuable because making a Cocoa application without XCode is sometimes kind of hard.</p>
<p>First let’s start with the <code>Makefile</code></p>
<div class="sourceCode"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span class="dt">opts </span><span class="ch">:=</span><span class="st"> -std=c++11 -fobjc-arc</span>
<span class="dt">fws </span><span class="ch">:=</span><span class="st"> -framework Cocoa -framework Webkit</span>
<span class="dt">libs </span><span class="ch">:=</span><span class="st"> -lc++</span>
<span class="dt">exec </span><span class="ch">:=</span><span class="st"> Prog</span>
<span class="dt">wrapper </span><span class="ch">:=</span><span class="st"> xcrun -r</span>

<span class="dv">all:</span>
	<span class="ch">${</span><span class="dt">wrapper</span><span class="ch">}</span> clang++ <span class="ch">${</span><span class="dt">opts</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">fws</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">libs</span><span class="ch">}</span> main.mm -o <span class="ch">${</span><span class="dt">exec</span><span class="ch">}</span>
	./<span class="ch">${</span><span class="dt">exec</span><span class="ch">}</span></code></pre></div>
<p>We’re going to use Webkit, ARC, C++11 and immediately run the program.</p>
<p>Now the program, I’m going to assume you are familiar with Cocoa development, Objective-C.</p>
<div class="sourceCode"><pre class="sourceCode objectivec"><code class="sourceCode objectivec"><span class="co">/* -*- objc -*- */</span>

<span class="ot">#import &lt;Foundation/Foundation.h&gt;</span>
<span class="ot">#import &lt;Webkit/WebKit.h&gt;</span>
<span class="ot">#import &lt;iostream&gt;</span>

<span class="kw">@interface</span> Window_delegate : NSObject &lt;NSWindowDelegate&gt;
<span class="kw">@end</span>

<span class="kw">@implementation</span> Window_delegate

-(<span class="dt">void</span>)windowWillClose:(id)a
{
  NSLog(<span class="st">@&quot;Exiting&quot;</span>);
  exit(<span class="dv">0</span>);
}
<span class="kw">@end</span>

<span class="kw">@interface</span> App_delegate : NSObject &lt;NSApplicationDelegate&gt;
@property (weak, nonatomic) NSWindow *_window;
<span class="kw">@end</span>

<span class="kw">@implementation</span> App_delegate

-(instancetype)init:(NSWindow*)parent_window
{
  <span class="kw">if</span> (<span class="kw">self</span> = [<span class="kw">super</span> init]) {
    <span class="kw">self</span>._window = parent_window;
    <span class="kw">return</span> <span class="kw">self</span>;
  }
  <span class="kw">return</span> nil;
}

-(<span class="dt">void</span>)applicationDidFinishLaunching:(NSNotification *)a_notification
{
  WebView *wb = [[WebView alloc] initWithFrame:<span class="kw">self</span>._window.contentView.frame];
  [<span class="kw">self</span>._window.contentView addSubview:wb];
  [[wb mainFrame]
    loadRequest:[NSURLRequest
		  requestWithURL:[NSURL URLWithString:<span class="st">@&quot;http://hyegar.com&quot;</span>]]];
}

<span class="kw">@end</span>

<span class="dt">void</span> start_program(<span class="dt">void</span>)
{
  NSApplication *app = [NSApplication sharedApplication];
  <span class="co">// Critical to have this so that you can add menus</span>
  [NSApp setActivationPolicy:NSApplicationActivationPolicyRegular];

  NSWindow *window =
    [[NSWindow alloc]
      initWithContentRect:NSMakeRect(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">800</span>, <span class="dv">600</span>)
		styleMask: NSTitledWindowMask | NSClosableWindowMask | NSMiniaturizableWindowMask
		  backing:NSBackingStoreBuffered
		    defer:NO];

  [window center];
  window.title = <span class="st">@&quot;Hello World&quot;</span>;
  [window makeKeyAndOrderFront:window];

  Window_delegate *d = [Window_delegate new];
  window.delegate = d;

  App_delegate *application_delegate = [[App_delegate alloc] init:window];
  app.delegate = application_delegate;
  [app activateIgnoringOtherApps:YES];
  [app run];
}

<span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span> **argv)
{
  std::cout &lt;&lt; <span class="st">&quot;Starting Application</span><span class="ch">\n</span><span class="st">&quot;</span>;
  @autoreleasepool {
    start_program();
  }
}</code></pre></div>
<p>a simple <code>make</code> invocation at the command line will build and run this program which should open up a page to this blog.</p>
<p>Notice that <code>C++</code> wasn’t really used, I added it here to make this blog post content rich and code sample very reusable for you as a starter post.</p>
<p>A post in the future will show you how to add <code>NSMenu</code>(s) to this application.</p>]]></description>
    <pubDate>Fri, 26 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/02/26/lets-make-a-browser/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Let's hack on Facebook flow</title>
    <link>http://hyegar.com/2016/02/25/lets-hack-on-flow/index.html</link>
    <description><![CDATA[<p>I’m writing this post for the JavaScript developer that wants to hack on flow but doesn’t know OCaml and is eager enough to learn some OCaml in pursuit of their hacking goals.</p>
<h1 id="getting-started.">Getting started.</h1>
<p>You’ll need to have <code>opam</code> installed, it is OCaml’s package manager. On <code>OS X</code> you can get it with <code>brew install opam</code>, on <code>debian</code> just use apt-get’s version and if on <code>Ubuntu</code> use this <a href="https://launchpad.net/~avsm/+archive/ubuntu/ppa">ppa</a></p>
<p>The very act of installing <code>opam</code> should have also installed a compiler, which we’ll need for building <code>flow</code>.</p>
<p>For completeness’s sake, we’ll do:</p>
<pre class="shell"><code>$ opam install ocamlfind ocamlbuild</code></pre>
<p>This should provide us with all the tools we need to build flow.</p>
<h1 id="building-flow-and-setting-goals">Building Flow and setting goals</h1>
<p>Now let’s build flow</p>
<pre class="shell"><code>$ git clone https://github.com/facebook/flow
$ cd flow
$ make</code></pre>
<p>and a sanity check:</p>
<pre class="shell"><code>$ bin/flow examples/01_HelloWorld
The flow server&#39;s version didn&#39;t match the client&#39;s, so it exited.
Going to launch a new one.

Launching Flow server for /Users/Edgar/Repos/flow/examples/01_HelloWorld
Spawned flow server (child pid=37837)
Logs will go to /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log
examples/01_HelloWorld/hello.js:7
  7: foo(&quot;Hello, world!&quot;);
     ^^^^^^^^^^^^^^^^^^^^ function call
  4:   return x*10;
              ^ string. This type is incompatible with
  4:   return x*10;
              ^^^^ number


Found 1 error</code></pre>
<p>this is expected of course. Let’s say our goal is to add some extra behavior around string <code>This type is incompatible</code>. First we try to find it.</p>
<pre class="shell"><code>$ cd src
$ grep -nIr &quot;This type is incompatible&quot; .</code></pre>
<p>Of the many hits we get we see that only two end in <code>.ml</code> which is the file extension for <code>OCaml</code> source code.</p>
<pre><code>./typing/flow_js.ml:3586:      let msg = &quot;This type is incompatible with&quot; in
./typing/flow_js.ml:3772:    &quot;This type is incompatible with&quot;</code></pre>
<p>Let’s open the second one on line <code>3772</code>, we see this function</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> <span class="st">&quot;This type is incompatible with&quot;</span></code></pre></div>
<p>it looks a little bit weird because it starts with an <code>and</code>. That’s okay, the <code>and</code> means that its being used in a function before its defined, otherwise it would have been:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> <span class="st">&quot;This type is incompatible with&quot;</span></code></pre></div>
<p>The function is named <code>err_msg</code>, it takes <code>l</code> and <code>u</code> and produces a <code>string</code>.</p>
<p>Let’s add a prefix to the string, we’ll change it to:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> <span class="st">&quot;Hello JS World-&gt; This type is incompatible with&quot;</span></code></pre></div>
<p>for completeness sake I assume you’re still in the <code>src</code> directory.</p>
<pre class="shell"><code>$ cd ..
$ make clean
$ make
$ bin/flow examples/01_HelloWorld 
The flow server&#39;s version didn&#39;t match the client&#39;s, so it exited.
Going to launch a new one.

Launching Flow server for /Users/Edgar/Repos/flow/examples/01_HelloWorld
Spawned flow server (child pid=40942)
Logs will go to /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log
examples/01_HelloWorld/hello.js:7
  7: foo(&quot;Hello, world!&quot;);
     ^^^^^^^^^^^^^^^^^^^^ function call
  4:   return x*10;
              ^ string. Hello JS World -&gt; This type is incompatible with
  4:   return x*10;
              ^^^^ number


Found 1 error</code></pre>
<p>Yay, we found the spot and changed it.</p>
<h1 id="now-lets-iterate-on-our-success">Now let’s iterate on our success</h1>
<p>Great, we changed the string, but let’s say we want to have some other stuff happen, let’s try some printing to the screen. We change <code>err_msg</code> to this instead:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> <span class="kw">begin</span>
    print_endline <span class="st">&quot;Hey Coder Reading hyegar.com&quot;</span>;
    <span class="st">&quot;Hello JS World -&gt; This type is incompatible with&quot;</span>
  <span class="kw">end</span></code></pre></div>
<h2 id="interesting-sidenotes">Interesting Sidenotes</h2>
<p>The <code>begin</code>, <code>end</code> are just syntax. I could have also written it using <code>( )</code> like so:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> (
    print_endline <span class="st">&quot;Hey Coder Reading hyegar.com&quot;</span>;
    <span class="st">&quot;Hello JS World -&gt; This type is incompatible with&quot;</span>)</code></pre></div>
<p>More interesting is the usage of <code>;</code>. First think to yourself, what is the return value of printing to the screen, nothing really. In OCaml we represent side effect and dummy values with <code>()</code>, said outloud as unit and written in type signatures as <code>unit</code>. When you see <code>unit</code> in a signature then it usually means the function is doing some kind of side effect like printing to screen or talking to a db.</p>
<p>So I could have also written it as:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> (
    <span class="kw">let</span> () = print_endline <span class="st">&quot;Hey Coder Reading hyegar.com&quot;</span> <span class="kw">in</span>
    <span class="st">&quot;Hello JS World -&gt; This type is incompatible with&quot;</span>)</code></pre></div>
<p>but the <code>;</code> is simplier and shorter.</p>
<p>Back to our coding:</p>
<p>…and now we do the same procedure as before including the <code>make clean</code> step. Now we run the code</p>
<pre class="shell"><code>$ bin/flow examples/01_HelloWorld
The flow server&#39;s version didn&#39;t match the client&#39;s, so it exited.
Going to launch a new one.

Launching Flow server for /Users/Edgar/Repos/flow/examples/01_HelloWorld
Spawned flow server (child pid=43811)
Logs will go to /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log
examples/01_HelloWorld/hello.js:7
  7: foo(&quot;Hello, world!&quot;);
     ^^^^^^^^^^^^^^^^^^^^ function call
  4:   return x*10;
              ^ string. Hello JS World -&gt; This type is incompatible with
  4:   return x*10;
              ^^^^ number


Found 1 error</code></pre>
<p>But where is our printed string of <code>Hey Coder Reading hyegar.com</code>?</p>
<h1 id="put-on-your-thinking-hat">Put on your thinking hat</h1>
<p>First clue is this: the error message is being created by the flow server. Many servers use logs and will redirect stdout, stderr to those logs, just makes sense to do that. Second clue is that <code>print_endline</code> prints to <code>stdout</code> and the third and final clue is that <code>flow</code> itself said at the beginning of invocation that:</p>
<pre><code>Logs will go to /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log</code></pre>
<p>and now we do a simple cat on this log file, yours will be named something unique to your machine, and see our calls to <code>print_endline</code> being made a surprisingly large number of times (Perhaps a question for the <code>flow</code> developers themselves)</p>
<pre class="shell"><code>cat /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log             ⏎
[2016-02-25 00:58:54] Initializing Server (This might take some time)
[2016-02-25 00:58:54] executable=/Users/Edgar/Repos/flow/bin/flow
[2016-02-25 00:58:54] version=0.22.0
[2016-02-25 00:58:54] Parsing
[2016-02-25 00:58:54] Building package heap
[2016-02-25 00:58:54] Running local inference
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
[2016-02-25 00:58:55] Re-resolving directly dependent files
[2016-02-25 00:58:55] Calculating dependencies
[2016-02-25 00:58:55] Merging
[2016-02-25 00:58:55] Done
[2016-02-25 00:58:55] Server is READY
[2016-02-25 00:58:55] Took 0.431947 seconds to initialize.
[2016-02-25 00:58:55] Status: Error</code></pre>
<p>And there you have it, now you start hacking on <code>OCaml</code> in flow. Be sure to check out my numerous other blog posts about <code>OCaml</code> including the jargon and build situation located <a href="http://hyegar.com/2015/10/20/so-youre-learning-ocaml/">here</a></p>]]></description>
    <pubDate>Thu, 25 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/02/25/lets-hack-on-flow/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Use OCaml to create statically typed HTML</title>
    <link>http://hyegar.com/2016/02/24/tyxml-ocaml-example/index.html</link>
    <description><![CDATA[<h1 id="motivation">Motivation</h1>
<p>This blog post is part of my effort to make OCaml libraries, and therefore OCaml itself, more accessible and documented. We’ll focus on generating statically typed HTML using the <code>tyxml</code> package.</p>
<h1 id="simple-starter-code">Simple Starter code</h1>
<p>Let’s start by installing <code>tyxml</code> itself, we can do that with:</p>
<pre class="shell"><code>$ opam install tyxml</code></pre>
<p>And here’s the OCaml code:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">open</span> Html5<span class="kw">.</span>M

<span class="kw">let</span> this_title = title (pcdata <span class="st">&quot;Your Cool Web Page&quot;</span>)

<span class="kw">let</span> image_box =
  div ~a:[a_id <span class="st">&quot;image_box&quot;</span>]
    []

<span class="kw">let</span> links_box =
  ul ~a:[a_class [<span class="st">&quot;links_bar&quot;</span>]; a_id <span class="st">&quot;links_bar&quot;</span>]
    [li ~a:[a_id <span class="st">&quot;home_click&quot;</span>]
       [pcdata <span class="st">&quot;My Musings&quot;</span>];
     li ~a:[a_id <span class="st">&quot;about_click&quot;</span>]
       [pcdata <span class="st">&quot;About Me&quot;</span>];
     li ~a:[a_id <span class="st">&quot;blog_posts_click&quot;</span>]
       [pcdata <span class="st">&quot;Blog&quot;</span>];
     li ~a:[a_id <span class="st">&quot;hackathons_click&quot;</span>]
       [pcdata <span class="st">&quot;Hackathons&quot;</span>]]

<span class="kw">let</span> common_footer =
  footer ~a:[a_id <span class="st">&quot;footer_box&quot;</span>]
    [p [pcdata <span class="st">&quot;This site was made with &quot;</span>;
        a ~a:[a_href <span class="st">&quot;http://ocaml.org&quot;</span>] [pcdata <span class="st">&quot;OCaml&quot;</span>];
        pcdata <span class="st">&quot; and &quot;</span>;
        a ~a:[a_href <span class="st">&quot;https://www.gnu.org/software/emacs/&quot;</span>] [pcdata <span class="st">&quot;emacs&quot;</span>]]]

<span class="kw">let</span> home_content =
  div
    [h2
       [pcdata <span class="st">&quot;Hello Coder&quot;</span>]]

<span class="kw">let</span> main_payload =
  div ~a:[a_id <span class="st">&quot;payload&quot;</span>]
    [home_content]

<span class="kw">let</span> common_nav =
  nav [links_box]

<span class="kw">let</span> content_box =
  div ~a:[a_id <span class="st">&quot;content_box&quot;</span>]
    [common_nav;
     main_payload;
     common_footer]

<span class="kw">let</span> main_script =
  script ~a:[a_src (Xml<span class="kw">.</span>uri_of_string <span class="st">&quot;main.js&quot;</span>)] (pcdata <span class="st">&quot;&quot;</span>)

<span class="kw">let</span> home_page_doc =
  html (head this_title
          [link ~rel:[<span class="dt">`Stylesheet</span>] ~href:<span class="st">&quot;home.css&quot;</span> ();])
    (body [image_box; content_box; main_script])

<span class="kw">let</span> pages = [(<span class="st">&quot;index.html&quot;</span>, home_page_doc)]

<span class="kw">let</span> () =
  List<span class="kw">.</span>iter <span class="kw">begin</span> <span class="kw">fun</span> (page_name, a_page) -&gt;
    Printf<span class="kw">.</span>sprintf <span class="st">&quot;Generating: %s&quot;</span> page_name |&gt; print_endline;
    <span class="kw">let</span> file_handle = open_out page_name <span class="kw">in</span>
    Html5<span class="kw">.</span>P<span class="kw">.</span>print (output_string file_handle) a_page;
    close_out file_handle;
    <span class="kw">match</span> Sys<span class="kw">.</span>command (Printf<span class="kw">.</span>sprintf <span class="st">&quot;tidy -im -ashtml %s&quot;</span> page_name) <span class="kw">with</span>
    | <span class="dv">0</span> -&gt; ()
    | c -&gt;
      print_endline <span class="st">&quot;You don&#39;t have tidy, no pretty printing of html&quot;</span>
  <span class="kw">end</span>
    pages</code></pre></div>
<p>Notice the example include a script tag usage and CSS usage. This is using just <code>tyxml</code> and the <code>stdlib</code>.</p>
<p>For completeness, here’s the CSS followed by the JavaScript and finally the Makefile to build it all</p>
<div class="sourceCode"><pre class="sourceCode css"><code class="sourceCode css"><span class="fl">#links_bar</span> li <span class="kw">{</span>
    <span class="kw">margin:</span><span class="dt">1em</span><span class="kw">;</span>
    <span class="kw">padding:</span><span class="dt">0.4em</span><span class="kw">;</span>
    <span class="kw">font-size:</span><span class="dt">large</span><span class="kw">;</span>
    <span class="kw">display:</span><span class="dt">inline</span><span class="kw">;</span>
    <span class="kw">cursor:</span><span class="dt">pointer</span><span class="kw">;</span>
    <span class="kw">border:</span><span class="dt">none</span><span class="kw">;</span>
    <span class="kw">border-radius:</span><span class="dt">0px</span><span class="kw">;</span>
    <span class="kw">transition:</span><span class="dt">.2s</span> linear<span class="kw">;</span>
    <span class="kw">text-align:</span><span class="dt">center</span><span class="kw">;</span>
<span class="kw">}</span></code></pre></div>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="st">&quot;use strict&quot;</span><span class="op">;</span>

<span class="kw">var</span> handle <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&quot;payload&quot;</span>)<span class="op">;</span>

<span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Hello World&quot;</span>)<span class="op">;</span>
<span class="va">console</span>.<span class="at">log</span>(handle)<span class="op">;</span></code></pre></div>
<div class="sourceCode"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span class="dt">site_gen </span><span class="ch">:=</span><span class="st"> make_site</span>

<span class="dv">all:</span>
	ocamlfind ocamlc site_html.ml -package tyxml -linkpkg -o <span class="ch">${</span><span class="dt">site_gen</span><span class="ch">}</span>
	./<span class="ch">${</span><span class="dt">site_gen</span><span class="ch">}</span>

<span class="dv">clean:</span>
	rm -f *.cmo *.cmt *.cmi <span class="ch">${</span><span class="dt">site_gen</span><span class="ch">}</span> index.html</code></pre></div>
<p>This all creates an <code>index.html</code> file that you can open in your browser. This example is also included in the <code>tyxml</code> source code under <code>examples</code>. I hope this helps you get started with OCaml easier.</p>]]></description>
    <pubDate>Wed, 24 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/02/24/tyxml-ocaml-example/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Getting an iOS compiler on Linux, full Objective-C support</title>
    <link>http://hyegar.com/2016/02/22/ios-cross-compiler/index.html</link>
    <description><![CDATA[<h1 id="the-problem">The problem</h1>
<p>Lately I’ve been doing iPhone low level debugging, forensics, and reverse engineering. For that I need an <code>iOS</code> compiler and that has usually only been available on <code>OS X</code>. However my day time development environment is Linux which clearly doesn’t have an <code>objective-c</code> runtime or libraries…how to solve this?</p>
<h1 id="the-solution">The solution</h1>
<p>I found this <a href="https://github.com/tpoechtrager/osxcross">project</a> but it was very hands on and difficult to reproduce on multiple machines. How could I reliably build this code? My solution was <code>NixOS</code>, specifically the <code>nixpkgs</code> package manager (I won’t go into the benefits of <code>Nix</code> in this post). Now you can also benefit from this work by getting an <code>armv7</code> iOS cross compiler for up to <code>iOS 9.2</code> by simply doing:</p>
<pre class="shell"><code>$ nix-env -i clang ios-cross-compile</code></pre>
<p>This will crap out initially because I cannot redistribute iOS SDKs, but it does give you instructions on how to manually add something to the <code>nix-store</code>. After you follow the instructions run the command again and then you’ll have all these tools</p>
<pre><code>armv7-apple-darwin11-ar                 armv7-apple-darwin11-nm
armv7-apple-darwin11-as                 armv7-apple-darwin11-nmedit
armv7-apple-darwin11-bitcode_strip      armv7-apple-darwin11-ObjectDump
armv7-apple-darwin11-checksyms          armv7-apple-darwin11-otool
armv7-apple-darwin11-clang              armv7-apple-darwin11-pagestuff
armv7-apple-darwin11-clang++            armv7-apple-darwin11-ranlib
armv7-apple-darwin11-codesign_allocate  armv7-apple-darwin11-redo_prebinding
armv7-apple-darwin11-dyldinfo           armv7-apple-darwin11-seg_addr_table
armv7-apple-darwin11-indr               armv7-apple-darwin11-segedit
armv7-apple-darwin11-install_name_tool  armv7-apple-darwin11-seg_hack
armv7-apple-darwin11-ld                 armv7-apple-darwin11-size
armv7-apple-darwin11-libtool            armv7-apple-darwin11-strings
armv7-apple-darwin11-lipo               armv7-apple-darwin11-strip
armv7-apple-darwin11-machocheck         armv7-apple-darwin11-unwinddump</code></pre>
<p>…installed and they will work for SDK <code>7.0-9.2</code>!</p>
<h1 id="stay-tuned">Stay tuned</h1>
<p>I’ll have more blog posts lined up including:</p>
<ol style="list-style-type: decimal">
<li><p>How to get correct code completion for objective-c on Linux in emacs</p></li>
<li><p>Creating iPhone command line tools, tweaks in C++, Objective-C using theos.</p></li>
</ol>]]></description>
    <pubDate>Mon, 22 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/02/22/ios-cross-compiler/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Proxy yourself</title>
    <link>http://hyegar.com/2016/01/24/see-http-traffic-with-proxy/index.html</link>
    <description><![CDATA[<p>Often times we want to see our network traffic in an organized way, one tool we can use is <code>tcpdump</code> but its a pretty low level tool and often times HTTP is all we actually care about.</p>
<h1 id="mitmproxy-man-in-the-middle-proxy">mitmproxy (man in the middle proxy)</h1>
<p>I’ve been using <code>mitmproxy</code>, its an incredible Python tool that is designed for HTTP and I especially love the command line ncurses interface. Its designed for man in the middle attacks but you can also use it as a debugging tool. Its installable with <code>pip</code> but I just settle for the version that is present on the package manager. With <code>mitmproxy</code> we’ll see all the HTTP traffic in a clean and organized way; <code>mitmproxy</code> is MUCH nicer than using squid and the icky configurations that come along with squid.</p>
<h1 id="example">Example</h1>
<p>This example was tested and works on Ubuntu 14.04 and also worked on an Ubuntu 14.04 VM running on VMWare on OS X.</p>
<p>Essentially we will send all IP traffic from our local machine through <code>mitmproxy</code> as a proxy, this is apparently called a local transparent proxy.</p>
<p>First we set up some rules for the Linux kernel:</p>
<p>I’m going to assume you have another Unix account named mitm_account, yes two accounts are needed.</p>
<pre class="shell"><code>$ sudo iptables -t nat -A OUTPUT -p tcp \
  -m owner ! --uid-owner mitm_account \
  --dport 443 -j REDIRECT --to-port 9001</code></pre>
<p>This looks complicated, you can read up on the <code>iptables</code> man page for all the nitty gritty details. I will try to get a <code>OS X</code> equivalent as well. We also do this same command over, but change <code>--dport</code> to 80 for regular HTTP traffic as well.</p>
<p>Note the <code>mitm_account</code>. This is the name of some other account, you’ll need to have two Unix accounts for this to work and <code>mitm_account</code> is the Unix account we’ll use that will actually run the <code>mitmproxy</code> program.</p>
<p>Then we’ll open another shell and change users to mitm_account and run:</p>
<pre class="shell"><code>$ mitmproxy -T -p 9001</code></pre>
<p>And this will start the proxy interceptions.</p>]]></description>
    <pubDate>Sun, 24 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/01/24/see-http-traffic-with-proxy/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Calling OCaml from Objective-C</title>
    <link>http://hyegar.com/2016/01/23/calling-ocaml-from-objective-c/index.html</link>
    <description><![CDATA[<p>I love iOS and I love OCaml, so I’ve packaged up an OCaml compiler for iOS via opam. Now all you need to build OCaml programs on the iPhone is opam!</p>
<h1 id="first-steps">First steps</h1>
<p>You’ll need the cross compiler. Follow the README instructions mentioned <a href="https://github.com/fxfactorial/opam-ios">here</a>. This will provide you with the cross compiler based on OCaml 4.02.0.</p>
<h1 id="example-code">Example Code</h1>
<p>Now I’ll show you an example of calling OCaml from Objective-C. Much of this code will have simplifications as its an example for getting you started. Also note that dealing at the C level and the OCaml runtime can be tricky and is not for beginners.</p>
<p>Here’s the OCaml code first, assume it is named code.ml</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="dv">1</span>  <span class="kw">let</span> make_string () =
<span class="dv">2</span>    print_endline <span class="st">&quot;Hello Word from OCaml&quot;</span>;
<span class="dv">3</span>    <span class="st">&quot;Hello World &quot;</span>
<span class="dv">4</span>  
<span class="dv">5</span>  <span class="kw">let</span> () =
<span class="dv">6</span>    Callback<span class="kw">.</span>register <span class="st">&quot;make_string&quot;</span> make_string</code></pre></div>
<p>We’re essentially telling the runtime to make this function available to grab as a handle, in this case it’s a handle on a closure.</p>
<p>And now the Objective-C code, assume it is named main.c</p>
<div class="sourceCode"><pre class="sourceCode objectivec"><code class="sourceCode objectivec"> <span class="dv">1</span>  #define CAML_NAME_SPACE
 <span class="dv">2</span>  
 <span class="dv">3</span>  #import &lt;Foundation/Foundation.h&gt;
 <span class="dv">4</span>  
 <span class="dv">5</span>  #include &lt;caml/callback.h&gt;
 <span class="dv">6</span>  #include &lt;caml/mlvalues.h&gt;
 <span class="dv">7</span>  
 <span class="dv">8</span>  <span class="dt">int</span> main (<span class="dt">int</span> argc, <span class="dt">char</span> **argv)
 <span class="dv">9</span>  {
<span class="dv">10</span>    caml_startup(argv);
<span class="dv">11</span>    caml_callback(*caml_named_value(<span class="st">&quot;make_string&quot;</span>), Val_unit);
<span class="dv">12</span>    NSLog(<span class="st">@&quot;Now using objective-c code&quot;</span>);
<span class="dv">13</span>    <span class="kw">return</span> <span class="dv">0</span>;
<span class="dv">14</span>  }</code></pre></div>
<p>Its important to call <code>caml_startup</code> before any OCaml callbacks. Then we get a handle on the closure and call it with unit.</p>
<p>To compile this code you’ll need the cross-compiler which was installed by following the directions on my opam-ios repo, the command you use is:</p>
<pre class="shell"><code>$ ocamloptrev -rev 8.3 -ccopt -ObjC -cclib &#39;-framework Foundation&#39; main.c code.ml -o F</code></pre>
<p>The 8.3 is the iOS SDK you want to link against, again see the README on the github repo for opam-ios for more details.</p>
<p>The output we get, <code>F</code> is an arm executable, when we run it on the iPhone we will get an output of:</p>
<pre class="shell"><code>$ some_iphone :~/  ./F
Hello Word from OCaml
2016-01-23 22:44:04.889 F[1977:507] Now using objective-c code</code></pre>
<p>Yay!</p>]]></description>
    <pubDate>Sat, 23 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/01/23/calling-ocaml-from-objective-c/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Write OCaml, run on node</title>
    <link>http://hyegar.com/2015/12/03/write_ocaml_on_node/index.html</link>
    <description><![CDATA[<p>I’ve been exposed to Node, its an amazing ecosystem with great cross platform support and a great standard library; my only issue is <strong>JavaScript</strong>. So I’ve been writing several libraries, bindings, that compile OCaml to JavaScript which I then run on <code>node</code>.</p>
<h1 id="sample-code">Sample Code</h1>
<p>Here are some working examples, many are directly from the README at <a href="https://github.com/fxfactorial/ocaml-nodejs/blob/master/README.md">ocaml-nodejs</a>.</p>
<p><strong>Multicast DNS over UDP sockets, only for the local network, like a no config p2p chat application.</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"> <span class="dv">1</span>  <span class="ot">open</span> Nodejs
 <span class="dv">2</span>  
 <span class="dv">3</span>  <span class="ot">module</span> U = Yojson<span class="kw">.</span>Basic<span class="kw">.</span><span class="dt">Util</span>
 <span class="dv">4</span>  
 <span class="dv">5</span>  <span class="kw">let</span> (multicast_addr, bind_addr, port) = <span class="st">&quot;224.1.1.1&quot;</span>, <span class="st">&quot;0.0.0.0&quot;</span>, <span class="dv">6811</span>
 <span class="dv">6</span>  
 <span class="dv">7</span>  <span class="kw">let</span> () =
 <span class="dv">8</span>    Random<span class="kw">.</span>self_init ();
 <span class="dv">9</span>    <span class="kw">let</span> p = <span class="kw">new</span> process <span class="kw">in</span>
<span class="dv">10</span>    <span class="kw">let</span> user_name = <span class="dt">ref</span> (Printf<span class="kw">.</span>sprintf <span class="st">&quot;User:%d&quot;</span> (Random<span class="kw">.</span><span class="dt">int</span> <span class="dv">10000</span>)) <span class="kw">in</span>
<span class="dv">11</span>    <span class="kw">let</span> listener = Udp_datagram<span class="kw">.</span>(create_socket ~reuse_address:<span class="kw">true</span> <span class="dt">Udp4</span>) <span class="kw">in</span>
<span class="dv">12</span>    <span class="kw">let</span> sender = Udp_datagram<span class="kw">.</span>(create_socket ~reuse_address:<span class="kw">true</span> <span class="dt">Udp4</span>) <span class="kw">in</span>
<span class="dv">13</span>  
<span class="dv">14</span>    listener#bind ~port ~address:multicast_addr ~f:<span class="kw">begin</span> <span class="kw">fun</span> () -&gt;
<span class="dv">15</span>      listener#add_membership multicast_addr;
<span class="dv">16</span>      listener#set_broadcast <span class="kw">true</span>;
<span class="dv">17</span>      listener#set_multicast_loopback <span class="kw">true</span>
<span class="dv">18</span>    <span class="kw">end</span> ();
<span class="dv">19</span>  
<span class="dv">20</span>  
<span class="dv">21</span>    listener#on_message <span class="kw">begin</span> <span class="kw">fun</span> b resp -&gt;
<span class="dv">22</span>  
<span class="dv">23</span>      <span class="kw">let</span> handle = b#to_string () |&gt; json_of_string <span class="kw">in</span>
<span class="dv">24</span>      <span class="kw">if</span> (handle &lt;!&gt; <span class="st">&quot;id&quot;</span> |&gt; Js<span class="kw">.</span>to_string) &lt;&gt; !user_name
<span class="dv">25</span>      <span class="kw">then</span> print_string (handle &lt;!&gt; <span class="st">&quot;message&quot;</span> |&gt; Js<span class="kw">.</span>to_string)
<span class="dv">26</span>  
<span class="dv">27</span>    <span class="kw">end</span>;
<span class="dv">28</span>  
<span class="dv">29</span>    p#stdin#on_data <span class="kw">begin</span> <span class="kw">function</span>
<span class="dv">30</span>      | <span class="dt">String</span> _ -&gt; ()
<span class="dv">31</span>      | <span class="dt">Buffer</span> b -&gt;
<span class="dv">32</span>        <span class="kw">let</span> msg = b#to_string () <span class="kw">in</span>
<span class="dv">33</span>        <span class="co">(* This needs to be redone with Re_pcre *)</span>
<span class="dv">34</span>        <span class="kw">if</span> String<span class="kw">.</span>length msg &gt; <span class="dv">10</span> <span class="kw">then</span> <span class="kw">begin</span>
<span class="dv">35</span>          <span class="kw">let</span> modify = String<span class="kw">.</span>sub msg <span class="dv">0</span> <span class="dv">9</span> <span class="kw">in</span>
<span class="dv">36</span>          <span class="kw">if</span> modify = <span class="st">&quot;set name:&quot;</span>
<span class="dv">37</span>          <span class="kw">then</span> <span class="kw">begin</span>
<span class="dv">38</span>            <span class="kw">let</span> as_string = Js<span class="kw">.</span><span class="dt">string</span> (String<span class="kw">.</span>trim msg) <span class="kw">in</span>
<span class="dv">39</span>            <span class="kw">let</span> chopped =
<span class="dv">40</span>              as_string##split (Js<span class="kw">.</span><span class="dt">string</span> <span class="st">&quot;:&quot;</span>) |&gt; to_string_list |&gt; Array<span class="kw">.</span>of_list
<span class="dv">41</span>            <span class="kw">in</span>
<span class="dv">42</span>            user_name := chopped.(<span class="dv">1</span>)
<span class="dv">43</span>          <span class="kw">end</span>
<span class="dv">44</span>        <span class="kw">end</span>;
<span class="dv">45</span>  
<span class="dv">46</span>        <span class="kw">let</span> msg = Printf<span class="kw">.</span>sprintf <span class="st">&quot;%s&gt;&gt;&gt;%s&quot;</span> !user_name (b#to_string ()) <span class="kw">in</span>
<span class="dv">47</span>        <span class="kw">let</span> total_message = (<span class="kw">object</span>%js
<span class="dv">48</span>          <span class="kw">val</span> id = !user_name |&gt; to_js_str
<span class="dv">49</span>          <span class="kw">val</span> message = msg |&gt; to_js_str
<span class="dv">50</span>          <span class="kw">end</span>) |&gt; stringify
<span class="dv">51</span>        <span class="kw">in</span>
<span class="dv">52</span>        sender#send
<span class="dv">53</span>          ~offset:<span class="dv">0</span>
<span class="dv">54</span>          ~length:(String<span class="kw">.</span>length total_message)
<span class="dv">55</span>          ~port
<span class="dv">56</span>          ~dest_address:multicast_addr
<span class="dv">57</span>          (<span class="dt">String</span> total_message)
<span class="dv">58</span>      <span class="kw">end</span></code></pre></div>
<p><strong>Create a site and render directly from jade templates</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">open</span> Nodejs

<span class="kw">let</span> () =
  <span class="kw">let</span> exp = <span class="kw">new</span> Express<span class="kw">.</span>express <span class="kw">in</span>
  <span class="kw">let</span> app = <span class="kw">new</span> Express<span class="kw">.</span>app ~existing:<span class="dt">None</span> <span class="kw">in</span>

  app#set_app_value (<span class="dt">`View_engine</span> <span class="st">&quot;jade&quot;</span>);
  app#use (exp#static <span class="st">&quot;.&quot;</span>);
  app#get ~path:<span class="st">&quot;/&quot;</span> (<span class="kw">fun</span> _ res -&gt; res#render <span class="st">&quot;index.jade&quot;</span>);

  app#listen ~port:<span class="dv">8080</span></code></pre></div>
<p><strong>Create a raw server from the Net module</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> () =
  <span class="kw">let</span> server = Net<span class="kw">.</span>create_server ~conn_listener:<span class="kw">begin</span> <span class="kw">fun</span> sock -&gt;
      sock#on_end (<span class="kw">fun</span> () -&gt; print_endline <span class="st">&quot;client disconnected&quot;</span>);
      sock#write <span class="st">&quot;Hello</span><span class="ch">\r\n</span><span class="st">&quot;</span>;
      sock &gt;|&gt; sock |&gt; ignore
    <span class="kw">end</span> ()
  <span class="kw">in</span>
  server#listen ~port:<span class="dv">8124</span> <span class="kw">begin</span> <span class="kw">fun</span> () -&gt;
    <span class="kw">let</span> info = server#address <span class="kw">in</span>
    print_endline info.Net<span class="kw">.</span>address;
    print_endline (info.Net<span class="kw">.</span>ip_family |&gt; string_of_ip);
    print_endline (info.Net<span class="kw">.</span>port |&gt; string_of_int);
    print_endline <span class="st">&quot;started server&quot;</span>
  <span class="kw">end</span></code></pre></div>
<p><strong>Create a file stream, gzip it, write it</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="dv">1</span>  <span class="ot">open</span> Nodejs
<span class="dv">2</span>  
<span class="dv">3</span>  <span class="kw">let</span> _ =
<span class="dv">4</span>    Fs<span class="kw">.</span>create_read_stream <span class="st">&quot;code.ml&quot;</span> &gt;|&gt;
<span class="dv">5</span>    Zlib<span class="kw">.</span>create_gzip () &gt;|&gt;
<span class="dv">6</span>    Fs<span class="kw">.</span>create_write_stream <span class="st">&quot;NEWCODE_TEST.ml&quot;</span></code></pre></div>
<p><strong>Typed Decoding of Buffers</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">open</span> Nodejs

<span class="kw">let</span> () =
  <span class="kw">let</span> string_decoder = <span class="kw">new</span> String_decoder<span class="kw">.</span>decoder <span class="dt">Utf_8</span> <span class="kw">in</span>
  <span class="kw">let</span> cent = <span class="kw">new</span> Buffer<span class="kw">.</span>buffer (<span class="dt">`Array</span> [|<span class="bn">0xE2</span>; <span class="bn">0x82</span>; <span class="bn">0xAC</span>|]) <span class="kw">in</span>
  (string_decoder#write cent) |&gt; print_endline</code></pre></div>
<p>This one is a bit more low level as it its a general idea of how these bindings are implemented.</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"> <span class="dv">1</span>  <span class="co">(* Assume this file is called c.ml *)</span>
 <span class="dv">2</span>  <span class="ot">open</span> Nodejs
 <span class="dv">3</span>  
 <span class="dv">4</span>  <span class="kw">class</span> child_process = <span class="kw">object</span>
 <span class="dv">5</span>  
 <span class="dv">6</span>    <span class="kw">val</span> raw_js = require_module <span class="st">&quot;child_process&quot;</span>
 <span class="dv">7</span>  
 <span class="dv">8</span>    <span class="co">(* Clearly not finished *)</span>
 <span class="dv">9</span>    <span class="kw">method</span> spawn_sync cmd args : (<span class="dt">string</span> * <span class="dt">string</span>) <span class="dt">list</span> =
<span class="dv">10</span>      <span class="kw">let</span> handle =
<span class="dv">11</span>        [|i (Js<span class="kw">.</span><span class="dt">string</span> cmd);
<span class="dv">12</span>          i (List<span class="kw">.</span>map Js<span class="kw">.</span><span class="dt">string</span> args |&gt; Array<span class="kw">.</span>of_list |&gt; Js<span class="kw">.</span><span class="dt">array</span>)|]
<span class="dv">13</span>        |&gt; m raw_js <span class="st">&quot;spawnSync&quot;</span>
<span class="dv">14</span>      <span class="kw">in</span>
<span class="dv">15</span>      (handle &lt;!&gt; <span class="st">&quot;envPairs&quot;</span>)
<span class="dv">16</span>      |&gt; Js<span class="kw">.</span>to_array |&gt; Array<span class="kw">.</span>map <span class="kw">begin</span> <span class="kw">fun</span> (s : Js<span class="kw">.</span>js_string Js<span class="kw">.</span>t) -&gt;
<span class="dv">17</span>        <span class="kw">let</span> chop = s##split (Js<span class="kw">.</span><span class="dt">string</span> <span class="st">&quot;=&quot;</span>) |&gt; to_string_list |&gt; Array<span class="kw">.</span>of_list <span class="kw">in</span>
<span class="dv">18</span>        (chop.(<span class="dv">0</span>), chop.(<span class="dv">1</span>))
<span class="dv">19</span>      <span class="kw">end</span>
<span class="dv">20</span>      |&gt; Array<span class="kw">.</span>to_list
<span class="dv">21</span>  
<span class="dv">22</span>  <span class="kw">end</span>
<span class="dv">23</span>  
<span class="dv">24</span>  <span class="kw">let</span> () =
<span class="dv">25</span>    <span class="kw">let</span> ls_proc = (<span class="kw">new</span> child_process)#spawn_sync <span class="st">&quot;ls&quot;</span> [] <span class="kw">in</span>
<span class="dv">26</span>    ls_proc |&gt; List<span class="kw">.</span>iter <span class="kw">begin</span> <span class="kw">fun</span> (key, value) -&gt;
<span class="dv">27</span>      Printf<span class="kw">.</span>sprintf <span class="st">&quot;Key was: %s and value: %s&quot;</span> key value
<span class="dv">28</span>      |&gt; print_endline
<span class="dv">29</span>    <span class="kw">end</span></code></pre></div>
<p>(Line one comes from my <code>nodejs</code> package, install it with <code>opam install nodejs</code>).</p>
<p>This example is a subset of my bindings to the builtin node module, <a href="https://nodejs.org/api/child_process.html">child_process</a>. Here we spawn a separate process and create an OCaml <code>alist</code> out of the environment variables of the spawned process. A point of interest is the poverty of OCaml StdLib’s <code>String</code> module, so much so that I get more functionality out of JavaScript’s string methods! (There’s no split in the StdLib).</p>
<p>To actually run this code you’ll need to do:</p>
<pre class="shell"><code>$ ocamlfind ocamlc c.ml -linkpkg -package nodejs -o T.out
$ js_of_ocaml T.out
$ node T.js</code></pre>
<h1 id="projects">Projects</h1>
<p>This approach surprisingly works and I’ve written similar bindings to <a href="https://github.com/fxfactorial/ocaml-npm-socket-io">socket.io</a> for which I have a working chat server:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">open</span> Nodejs

<span class="kw">let</span> () =
  <span class="kw">let</span> io = Socket_io<span class="kw">.</span>require () <span class="kw">in</span>
  <span class="kw">let</span> server =
    Http<span class="kw">.</span>create_server <span class="kw">begin</span> <span class="kw">fun</span> incoming response -&gt;

      Fs<span class="kw">.</span>read_file ~path:<span class="st">&quot;./client.html&quot;</span> <span class="kw">begin</span> <span class="kw">fun</span> err data -&gt;
        response#write_head ~status_code:<span class="dv">200</span> [(<span class="st">&quot;Content-type&quot;</span>, <span class="st">&quot;text/html&quot;</span>)];
        response#end_ ~data:(Http<span class="kw">.</span><span class="dt">String</span> data) ()

      <span class="kw">end</span>
    <span class="kw">end</span>
  <span class="kw">in</span>
  <span class="kw">let</span> app = server#listen ~port:<span class="dv">8080</span> <span class="kw">begin</span> <span class="kw">fun</span> () -&gt;
      Printf<span class="kw">.</span>sprintf
        <span class="st">&quot;Started Server and Running node: %s&quot;</span> (<span class="kw">new</span> process#version)
      |&gt; print_endline
    <span class="kw">end</span>
  <span class="kw">in</span>

  <span class="kw">let</span> io = io#listen app <span class="kw">in</span>
  io#sockets#on_connection <span class="kw">begin</span> <span class="kw">fun</span> socket -&gt;

    socket#on <span class="st">&quot;message_to_server&quot;</span> <span class="kw">begin</span> <span class="kw">fun</span> data -&gt;

      io#sockets#emit
        ~event_name:<span class="st">&quot;message_to_client&quot;</span>
        !!(<span class="kw">object</span>%js <span class="kw">val</span> message = data &lt;!&gt; <span class="st">&quot;message&quot;</span> <span class="kw">end</span>)

    <span class="kw">end</span>
  <span class="kw">end</span></code></pre></div>
<p>Notice the features of OCaml that don’t exist in JavaScript at all, like named parameters.</p>
<p>Another project in this vein are my bindings to Github’s <code>Electron</code> project, here’s a project I did with a friend using Basecamp’s recently released <code>Trix</code> editor.</p>
<div class="figure">
<img src="./electron_working.gif" alt="img" />
<p class="caption">img</p>
</div>
<h1 id="like-what-you-see">Like what you see?</h1>
<p>Writing out these bindings is a bit of work, Node’s API is pretty big in addition to third party code like socket.io, express, and Electron. Much of these bindings are quite formulaic, although some ideas don’t easily match up between the OCaml and JavaScript boundary, like <code>varargs</code> so that requires some more thought at times.</p>
<p>To any reader interested in OCaml open-source or for whatever reason, send me a PR, its mostly an issue of translating <a href="https://nodejs.org/api/index.html">the Node API</a> into the equivalent bindings:</p>
<p><a href="https://github.com/fxfactorial/ocaml-nodejs">nodejs repo</a></p>
<p><a href="https://github.com/fxfactorial/ocaml-electron">electron repo</a></p>]]></description>
    <pubDate>Thu, 03 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2015/12/03/write_ocaml_on_node/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>So you're learning OCaml</title>
    <link>http://hyegar.com/2015/10/20/so-youre-learning-ocaml/index.html</link>
    <description><![CDATA[<p>Today was the first day of the Introduction to Functional Programming in <code>OCaml</code> course, located <a href="https://www.france-universite-numerique-mooc.fr/courses/parisdiderot/56002/session01/about">here</a>. Apparently over 2,000 people signed up and while doubtlessly many will drop out, there will still be 2,000 more programmers that are now aware of this amazing language called <code>OCaml</code>.</p>
<h1 id="crash-course-on-the-ocaml-ecosystem.">Crash course on the OCaml ecosystem.</h1>
<p>These are some key notes that you should know.</p>
<ol style="list-style-type: decimal">
<li><code>opam</code> is the package manager for OCaml. It is very advanced and supports many features. The most basic of which is</li>
</ol>
<pre class="shell"><code>$ opam install &lt;some_package&gt;</code></pre>
<p>For people on <code>OS X</code>, you can get it on <code>brew</code> and all the <code>Linux</code> distros should have <code>opam</code> for you to install. For Windows people, get a VM. EDIT: To be clear, OCaml can build <strong>native</strong> executables on Windows just fine, but opam doesn’t work on this platform and for a beginner you’ll waste a lot of time with environment issues or libraries that assume Unix.</p>
<ol start="2" style="list-style-type: decimal">
<li>Once you have <code>opam</code> installed, you probably want to do:</li>
</ol>
<pre class="shell"><code>$ opam switch 4.02.3</code></pre>
<p>This will install the latest version of the compiler.</p>
<ol start="3" style="list-style-type: decimal">
<li><p><code>ocamlfind</code> is a program that predates <code>opam</code> and wraps the standard <code>OCaml</code> compilers: <code>ocamlc</code> and <code>ocamlopt</code>. The former is a byte code compiler and the latter creates native code.</p></li>
<li><p><code>ocamlbuild</code> is a tool that helps build <code>OCaml</code> programs, many people have strong opinions on it.</p></li>
</ol>
<ol start="5" style="list-style-type: decimal">
<li><p><code>oasis</code> is a tool that helps abstract usage of 3, 4. I resisted it for a while and wrote Makefiles instead, don’t do that, just use oasis. The oasis flow basically goes like this: (Be aware that oasis is really finicky and its error messages are useless)</p>
<p>5.1) Create a directory.</p>
<p>5.2) Go to the directory and create a file named <strong>_oasis</strong> and directory named <code>src</code></p></li>
</ol>
<p>5.3) Here is a template of the contents of the <strong>_oasis</strong> file</p>
<pre class="conf"><code>OASISFormat:  0.4
OCamlVersion: &gt;= 4.02.3
Name:         opam_package_name
Version:      0.1
Maintainers:  New OCaml programmer
Homepage:     http://my_coolsite.com
Synopsis:     Some short description
Authors:      Cool@me.com
License:      BSD-3-clause
Plugins:      META (0.4), DevFiles (0.4)
AlphaFeatures: ocamlbuild_more_args

Description:
Some cool description

# This is a comment and this below creates an binary program
Executable &lt;some_program_name&gt;
Path: src
BuildTools:ocamlbuild
install: true
MainIs: main.ml
CompiledObject: native
BuildDepends: package_one, package_two

# Another comment, this builds a library called pg
Library pg
Path:         src
# oasis will figure out the dependencies, 
# Just list the modules you want public, 
# Note that there&#39;s no .ml, just give the name
Modules:      Pg
CompiledObject: byte
BuildDepends: some_package</code></pre>
<p>5.4) Generate the Makefile, setup.ml, configure and other build crap.</p>
<pre class="shell"><code>$ oasis setup -setup-update dynamic</code></pre>
<p>5.5) Actually build your code, yes its just a call to make.</p>
<pre class="shell"><code>$ make</code></pre>
<p>5.6) You can stop here, but you can go even further with <code>oasis2opam</code>. Install it with: <code>opam install oasis2opam</code>, then in your project’s root directory, aka the directory with the _oasis file, do: <code>oasis2opam --local</code>. This creates the <code>opam</code> directory and some meta data for the opam packaging system. Your local package can now be a first class citizen with opam just by doing this in the same project root directory:</p>
<pre><code>$ opam pin add &lt;your_package_name&gt; . -y</code></pre>
<ol start="6" style="list-style-type: decimal">
<li><code>merlin</code> is a OCaml program that is simply amazing it drives code completion for plugins available in <code>emacs</code> and <code>vim</code>. Once you have merlin installed and running, add a <code>.merlin</code> file to your project so that <code>merlin</code> knows what packages to code complete for, a sample <code>.merlin</code> file looks like this:</li>
</ol>
<pre class="shell"><code>B _build/src
S src
PKG cmdliner js_of_ocaml</code></pre>
<p>Notice how I put the <code>B _build/src</code> That sort of assumes you’re using <code>_oasis</code> and you made the <code>src</code> directory I mentioned earlier.</p>
<ol start="7" style="list-style-type: decimal">
<li><p>There are no full blown IDEs for OCaml, learn <code>emacs</code> or <code>vim</code>. EDIT: apparently <code>Sublime Text</code> has a merlin plugin, if you’re already familiar with Sublime Text then just stick with it, merlin is really what matters here.</p></li>
<li><p><code>utop</code> is an enhanced repl, its better than the plain <code>ocaml</code> repl. Install it with <code>opam install utop</code></p></li>
</ol>
<h1 id="library-situation">Library situation</h1>
<p><code>OCaml</code> does have a standard library but it sucks. It was only created to serve the needs of the compiler programmers, ie its not like <code>Python</code>’s standard library which has everything under the sun + the moon. There are a few standard library replacements, one is called <code>Core</code> and its provided by Jane Street. Its the library used in the <strong>Real World OCaml</strong> book/website. Another standard library replacement is called <code>Batteries</code>, this is more “community” supported. There is a more recent contender called <code>Containers</code>. For a categorized list of contemporary and well liked/must have libraries, checkout the <a href="https://github.com/rizo/awesome-ocaml">awesome-ocaml</a> repository.</p>
<h1 id="speaking-of-libraries">Speaking of Libraries…</h1>
<p>This is “functional programming,” so many of the real world libraries you’ll encounter will have Monadic interfaces, like <code>lwt</code> or Core’s <code>async</code>, both are asynchronous threading libraries, use Monads and that wacky <code>&gt;&gt;=</code> function. But you really shouldn’t fret about what a Monad is or represents, just follow the type signature and you’ll be fine. For a more detailed treatment of Monads in OCaml and a code example to talk to the <code>Stripe</code> API, see <a href="http://hyegar.com/blog/2015/09/23/let&#39;s-just-use-monads/">this</a>.</p>
<h1 id="doing-simple-tasks-shameless-plug">Doing simple tasks (shameless plug)</h1>
<p>I try using <code>OCaml</code> for literally everything and that includes going to hackathons, to make this less painful I wrote a library called <code>Podge</code> which helps with simple stuff. I don’t claim its a standard library replacement, just a library for getting stuff done. These two code samples assume the file is named <code>code.ml</code> and can be run with <code>utop code.ml</code></p>
<p>First install with opam: <code>$ opam install podge</code> 1) Reading output of a process</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">#require &quot;podge&quot;</span>
<span class="kw">let</span> () = 
  Podge<span class="kw">.</span>Unix<span class="kw">.</span>read_process_output <span class="st">&quot;ls -halt&quot;</span> |&gt; List<span class="kw">.</span>iter print_endline</code></pre></div>
<p>The <code>|&gt;</code> just means piping, its piping the output of <code>read_process_output</code> into the input of the partially applied function <code>iter</code></p>
<ol start="2" style="list-style-type: decimal">
<li>Reading a file</li>
</ol>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">#require &quot;podge&quot;</span>
<span class="kw">let</span> () = 
Podge<span class="kw">.</span>Unix<span class="kw">.</span>read_lines <span class="st">&quot;code.ml&quot;</span> |&gt; List<span class="kw">.</span>iter print_endline</code></pre></div>
<p>Similar to 1, this reads all lines of file and gives it to the input of the partially applied function <code>iter</code>.</p>
<p>These are two simple code samples from <code>Podge</code>, check out the <a href="https://github.com/fxfactorial/podge">repo</a> for other useful modules like: (The README has code examples)</p>
<ol style="list-style-type: decimal">
<li><code>Web</code> for simple HTTP requests and getting data back as JSON,</li>
<li><code>Xml</code> for querying simple XML documents</li>
<li><code>ANSITerminal</code> for creating colored shell output</li>
<li><code>String</code> which is all due to <a href="http://rgrinberg.com">Rudi Grinberg</a>.</li>
</ol>
<h1 id="what-can-you-do-with-it">What can you do with it?</h1>
<p>Loads.</p>
<ol style="list-style-type: decimal">
<li>Compilers!, lots of compilers/compiler tools are written in OCaml: Facebook uses OCaml for <a href="https://github.com/facebook/pfff">pfff</a> and <a href="https://github.com/facebook/flow">flow</a> and the first cut of Rust was written in OCaml.</li>
<li>Financial world, <a href="https://www.janestreet.com">Jane Street</a> uses OCaml for basically everything (AFAIK)</li>
<li>Systems Programming: <a href="https://ahrefs.com">ahrefs</a>, my former employer Ahrefs uses OCaml for heavy systems programming.</li>
<li>Kernels: Unikernels are hot right now, the most prominent one is the <a href="https://mirage.io">Mirage-OS</a> project and its all OCaml.</li>
<li>Shameless plug: I use OCaml as well for <code>js_of_ocaml</code>, in fact I’m using it to write an Electron app with a node backend (All code is OCaml compiled into JS, then run on node/Electron), see <a href="https://github.com/fxfactorial/ocaml-electron">here.</a></li>
<li>Genomics/Bioinformatics: <a href="https://github.com/hammerlab">Hammer Lab</a> in NYC uses OCaml for their genomics/sequencing work.</li>
</ol>
<p>…And I’m sure there’s more I haven’t mentioned…</p>
<h1 id="stick-with-it">Stick with it!</h1>
<p>This style of coding might be new to you or maybe its your first programming language, stick with it and continue. <code>OCaml</code> offers many awesome features and has many strengths including a very professional and pragmatic community.</p>]]></description>
    <pubDate>Tue, 20 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2015/10/20/so-youre-learning-ocaml/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>2015-10-12-monads-you-can-understand</title>
    <link>http://hyegar.com/2015/10/12/monads-you-can-understand/index.html</link>
    <description><![CDATA[<p>Let’s learn about monads as programmers, that is let’s use them for building something and in the process we’ll build up a intuition; practice first, then you can go back to theory later.</p>
<p>This post is split in two parts:</p>
<p>Part 1 is just to get the ideas out the door</p>
<p>Part 2 (Currently not written) is for an OCaml audience, just to improve the quality of the OCaml code itself</p>
<p>As Bryan O’Sullivan said (From Real World Haskell) “…we need something that’s non-trivial but still chewey.” So we’ll build a real working example in OCaml that will be the starting point of a library to the <a href="https://stripe.com/docs/api">Stripe API</a> and it will use monads.</p>
<h1 id="prereqs">Prereqs</h1>
<p>We need to make sure we have all the same starting point for this code, I assume you have <a href="https://opam.ocaml.org">opam</a> installed. Now do:</p>
<pre class="shell"><code>$ opam install lwt cohttp yojson uri</code></pre>
<p>These are the libaries we will use: <code>lwt</code> is for threading, <code>cohttp.lwt</code> is for our HTTP requests, <code>uri</code> for handling URIs and <code>yojson</code>, an easy to use and <strong>de facto</strong> json library.</p>
<h1 id="stripe">Stripe</h1>
<p>The Stripe API is a straight forward REST API. You’ll need to have a developer account from which you’ll get your Test Key, hence forth known as <code>key</code>. We’ll focus on one task, we’ll start the process of charging a credit card. Point your browser to this <a href="https://stripe.com/docs/api#create_charge">link</a> which shows how to create the “Charge” object. Be sure to be looking at that page while logged in because we’ll need the value for the <code>source</code> parameter, we’ll call it the <strong>source token</strong> From there we see we need to do a <code>POST</code> to <a href="https://api.stripe.com/v1/charges" class="uri">https://api.stripe.com/v1/charges</a> with several required arguments:</p>
<ol style="list-style-type: decimal">
<li>The amount to charge</li>
<li>The ISO code for currency</li>
<li>Either the Customer or Source</li>
</ol>
<p>All of Stripe’s API returns JSON, so we can already sketch out our function’s signature and helper data structure, something like:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">type</span> t = { authed : Cohttp<span class="kw">.</span>Headers<span class="kw">.</span>t; 
           end_point : <span class="dt">string</span>; }

<span class="kw">val</span> make_handle : <span class="dt">unit</span> -&gt; t

<span class="kw">val</span> create_charge : <span class="dt">int</span> -&gt; 
                    <span class="dt">string</span> -&gt; 
                    <span class="dt">string</span> -&gt;
                    t -&gt;  
                    Yojson<span class="kw">.</span>Basic<span class="kw">.</span>json Lwt<span class="kw">.</span>t</code></pre></div>
<p>Mostly straight forward, although that <code>Lwt.t</code> should look at little strange. The quick answer that that <code>create_charge</code> will give back an <code>Lwt.t</code> monad which in this case will contain a <code>json</code> object.</p>
<p>Let’s start filling out the <code>make_handle</code> function,</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> make_handle () = 
  <span class="kw">let</span> auth_me k = 
    <span class="kw">let</span> starter = Cohttp<span class="kw">.</span>Header<span class="kw">.</span>init () <span class="kw">in</span> 
    Cohttp<span class="kw">.</span>Auth<span class="kw">.</span>credential_of_string (<span class="st">&quot;Bearer &quot;</span> ^ k)
    |&gt; Cohttp<span class="kw">.</span>Header<span class="kw">.</span>add_authorization starter
  <span class="kw">in</span>
  {authed = auth_me <span class="st">&quot;YOUR STRIPE KEY&quot;</span>; 
   <span class="co">(** Hardcoding to the charge create path *)</span>
   end_point = <span class="st">&quot;https://api.stripe.com/v1/charges&quot;</span>}</code></pre></div>
<p>This creates our record needed for making a post. Stripe requires a key in each request so we’ll make this record to encapsulate that, otherwise we have to write boilerplate code, never fun.</p>
<p>Now the first cut of out <code>create_charge</code> function:</p>
<p>(<strong>META NOTE</strong> This is horrible indentation, I’m only doing it because of the sizing done in the exporting of this document and I want it to be clear what’s happening and the coloring is wrong because <sub>’</sub> can be used in a value’s name but its messing up the coding exporter)</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"> <span class="dv">1</span>  <span class="kw">let</span> create_charge amount currency source handle = 
 <span class="dv">2</span>    <span class="kw">let</span> <span class="ot">open</span> Cohttp_lwt_unix <span class="kw">in</span>
 <span class="dv">3</span>    <span class="kw">let</span> this_uri = Uri<span class="kw">.</span>of_string handle.end_point <span class="kw">in</span>
 <span class="dv">4</span>    [(<span class="st">&quot;amount&quot;</span>, string_of_int amount);
 <span class="dv">5</span>     (<span class="st">&quot;currency&quot;</span>, currency);]
 <span class="dv">6</span>     (<span class="st">&quot;source&quot;</span>, source)]
 <span class="dv">7</span>    |&gt; Uri<span class="kw">.</span>add_query_params&#39; this_uri
 <span class="dv">8</span>    |&gt; Client<span class="kw">.</span>post ~headers:handle.authed &gt;&gt;= 
 <span class="dv">9</span>       <span class="kw">fun</span> (resp, body) -&gt; 
<span class="dv">10</span>       <span class="co">(* This can also be done more succinctly</span>
<span class="co">11          with:</span>
<span class="co">12          Cohttp_lwt_body.to_string body &gt;|=</span>
<span class="co">13          Yojson.Basic.from_string  *)</span>
<span class="dv">14</span>       Cohttp_lwt_body<span class="kw">.</span>to_string body &gt;&gt;= <span class="kw">fun</span> j -&gt; 
<span class="dv">15</span>       Yojson<span class="kw">.</span>Basic<span class="kw">.</span>from_string j |&gt; return</code></pre></div>
<p>Okay, so what the hell is going on. Line 2 open the <code>Cohttp_lwt_unix</code> module locally to this function so that we can type <code>Client.post</code> instead of <code>Cohttp_lwt_unix.Client.post</code>. Line 3 creates a <code>uri</code> object, lines 4-6 are the query parameters we want to add to our <code>uri</code> object. The <code>|&gt;</code> symbol is a function, you can call it reverse apply, you can define it as</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> ( |&gt; ) f x = x f</code></pre></div>
<p>but you don’t need to, it comes with OCaml. It just says take the left side as the input to the right side, aka a Unix Pipe. Now let’s see the signature of <code>Client.post</code>, its:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">val</span> post ?ctx:Cohttp_lwt_unix<span class="kw">.</span>Client<span class="kw">.</span>ctx -&gt;
         ?body:Cohttp_lwt_body<span class="kw">.</span>t -&gt;
         ?chunked:<span class="dt">bool</span> -&gt;
         ?headers:Cohttp<span class="kw">.</span>Header<span class="kw">.</span>t -&gt;
         Uri<span class="kw">.</span>t -&gt; 
         (Cohttp<span class="kw">.</span>Response<span class="kw">.</span>t * Cohttp_lwt_body<span class="kw">.</span>t) Lwt<span class="kw">.</span>t</code></pre></div>
<p>Looks big but we don’t care about most of it, in fact we could just care about the <code>Uri.t</code> parameter since the rest of the parameters, the ones with <code>?</code>, have default values but we can override them as we do on line 8’s <code>Client.post ~headers:handle.authed</code>. Now notice the final value of a call to <code>Client.post</code>, its:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml">(Cohttp<span class="kw">.</span>Response<span class="kw">.</span>t * Cohttp_lwt_body<span class="kw">.</span>t) Lwt<span class="kw">.</span>t</code></pre></div>
<p>This says that <code>post</code> will give back an <code>Lwt.t</code> monad which contains a tuple of a response object and the body, again completely reasonable. The line of line 8 features the famous <code>&gt;&gt;=</code> operator, aka <code>bind</code> it’s signature is:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">val</span> ( &gt;&gt;= ) : &#39;a Lwt<span class="kw">.</span>t -&gt; (&#39;a -&gt; &#39;b Lwt<span class="kw">.</span>t) -&gt; &#39;b Lwt<span class="kw">.</span>t</code></pre></div>
<p>And this says that <code>&gt;&gt;=</code> takes something wrapped in the <code>Lwt.t</code> monad on the left side and passes the unwrapped value to a function on the right side which has to return something wrapped in the <code>Lwt.t</code> monad where the two somethings can be different or the same. So in our code that right side is this anonymous function, this lambda:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">fun</span> (resp, body) -&gt;</code></pre></div>
<p>Now we have a handle on the http response and the body, we won’t do any error checking so let’s just look at the body with line 10’s usage of <code>Cohttp_lwt_body.to_string</code> whose signature is:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">val</span> to_string : Cohttp_lwt_body<span class="kw">.</span>t -&gt; <span class="dt">string</span> Lwt<span class="kw">.</span>t</code></pre></div>
<p>Translation: Takes a body and gives back a string wrapped in a Lwt.t monad. Remember our goal is to get the body as a json object, so we could just pipe it to <code>Yojson.Basic.from_string</code> but still recall that our <code>create_charge</code> function had final value of <code>Yojson.Basic.json Lwt.t</code>, not a plain <code>Yojson.Basic.json</code> so we pipe it to the other famous monad related function, <code>return</code>. <code>return</code> really should have been called inject because it takes a plain value and “injects” it into a monad, let’s see its value here:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">val</span> return : &#39;a -&gt; &#39;a Lwt<span class="kw">.</span>t</code></pre></div>
<p>We are using it to turn our plain <code>Yojson.Basic.json</code> into a <code>Yojson.Basic.json Lwt.t</code> Now let’s use this code to actually do something.</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> program = 
  <span class="kw">let</span> this_handle = make_handle () <span class="kw">in</span>
  <span class="kw">let</span> st = <span class="st">&quot;SOURCE_TOKEN_MENTIONED_EARLIER&quot;</span> <span class="kw">in</span>
  create_charge <span class="dv">500</span> <span class="st">&quot;usd&quot;</span> this_handle &gt;&gt;= <span class="kw">fun</span> j -&gt; 
  Yojson<span class="kw">.</span>Basic<span class="kw">.</span>pretty_to_string j |&gt; Lwt_io<span class="kw">.</span>printl 

<span class="kw">let</span> () = 
  Lwt_main<span class="kw">.</span>run program</code></pre></div>
<p>At this point this should be understandable, our create_charge is returning a monad so we pass its output to <code>&gt;&gt;=</code>, which passes a json object to a lambda, we turn the json value to a pretty printed string and pipe it out to <code>Lwt_io.printl</code>, a <code>printf</code> for the <code>Lwt</code> library.</p>
<h1 id="build-and-run">Build and Run</h1>
<p>Now let’s build our program and run it, assuming all the code is in <code>code.ml</code> we invoke the OCaml toolchain as so:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml">$ ocamlfind ocamlopt -linkpkg code.ml -packages lwt.unix,cohttp.lwt,yojson,uri -o <span class="dt">T</span></code></pre></div>
<p>assuming everything well, you should have an executable T, which will print something like:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml">$ ./<span class="dt">T</span>
{
  <span class="st">&quot;object&quot;</span>: <span class="st">&quot;charge&quot;</span>,
  <span class="st">&quot;created&quot;</span>: <span class="dv">1443072037</span>,
  <span class="st">&quot;livemode&quot;</span>: <span class="kw">false</span>,
  <span class="st">&quot;paid&quot;</span>: <span class="kw">true</span>,
  <span class="st">&quot;status&quot;</span>: <span class="st">&quot;succeeded&quot;</span>,
  <span class="st">&quot;amount&quot;</span>: <span class="dv">500</span>,
  <span class="st">&quot;currency&quot;</span>: <span class="st">&quot;usd&quot;</span>,
  <span class="st">&quot;refunded&quot;</span>: <span class="kw">false</span>,
  <span class="st">&quot;source&quot;</span>: {
    <span class="st">&quot;object&quot;</span>: <span class="st">&quot;card&quot;</span>,
    <span class="st">&quot;brand&quot;</span>: <span class="st">&quot;Visa&quot;</span>,
    <span class="st">&quot;funding&quot;</span>: <span class="st">&quot;credit&quot;</span>,
    <span class="st">&quot;exp_month&quot;</span>: <span class="dv">8</span>,
    <span class="st">&quot;exp_year&quot;</span>: <span class="dv">2016</span>,
    <span class="st">&quot;country&quot;</span>: <span class="st">&quot;US&quot;</span>,
    <span class="st">&quot;name&quot;</span>: null,
    <span class="st">&quot;address_line1&quot;</span>: null,
    <span class="st">&quot;address_line2&quot;</span>: null,
    <span class="st">&quot;address_city&quot;</span>: null,
    <span class="st">&quot;address_state&quot;</span>: null,
    <span class="st">&quot;address_zip&quot;</span>: null,
    <span class="st">&quot;address_country&quot;</span>: null,
    <span class="st">&quot;cvc_check&quot;</span>: null,
    <span class="st">&quot;address_line1_check&quot;</span>: null,
    <span class="st">&quot;address_zip_check&quot;</span>: null,
    <span class="st">&quot;tokenization_method&quot;</span>: null,
    <span class="st">&quot;dynamic_last4&quot;</span>: null,
    <span class="st">&quot;metadata&quot;</span>: {},
    <span class="st">&quot;customer&quot;</span>: null
  },
  <span class="st">&quot;captured&quot;</span>: <span class="kw">true</span>,
  <span class="st">&quot;failure_message&quot;</span>: null,
  <span class="st">&quot;failure_code&quot;</span>: null,
  <span class="st">&quot;amount_refunded&quot;</span>: <span class="dv">0</span>,
  <span class="st">&quot;customer&quot;</span>: null,
  <span class="st">&quot;invoice&quot;</span>: null,
  <span class="st">&quot;dispute&quot;</span>: null,
  <span class="st">&quot;metadata&quot;</span>: {},
  <span class="st">&quot;statement_descriptor&quot;</span>: null,
  <span class="st">&quot;fraud_details&quot;</span>: {},
  <span class="st">&quot;receipt_email&quot;</span>: null,
  <span class="st">&quot;receipt_number&quot;</span>: null,
  <span class="st">&quot;shipping&quot;</span>: null,
  <span class="st">&quot;destination&quot;</span>: null,
  <span class="st">&quot;application_fee&quot;</span>: null,
  <span class="st">&quot;refunds&quot;</span>: {
    <span class="st">&quot;object&quot;</span>: <span class="st">&quot;list&quot;</span>,
    <span class="st">&quot;total_count&quot;</span>: <span class="dv">0</span>,
    <span class="st">&quot;has_more&quot;</span>: <span class="kw">false</span>,
    <span class="st">&quot;url&quot;</span>: <span class="st">&quot;/v1/charges/ch_16oS9pJDURztdKY9Z7QS8c8D/refunds&quot;</span>,
    <span class="st">&quot;data&quot;</span>: []
  }
}</code></pre></div>
<p>Yay success.</p>
<h1 id="moral-of-the-story">Moral of the Story</h1>
<p>So in terms of actually day to day coding, you don’t actually need to know what a monad “is”, you just need to know how to use it and honestly that’s completely fine, in fact just following the type signatures can take you pretty far in a new, unfamiliar library.</p>]]></description>
    <pubDate>Mon, 12 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2015/10/12/monads-you-can-understand/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>2015-10-07-elegant</title>
    <link>http://hyegar.com/2015/10/07/elegant/index.html</link>
    <description><![CDATA[<p>I love elegant code, code that just flows and lets you “see” how the data moves through execution. As part of my <a href="https://github.com/fxfactorial/brozip">brozip</a> application, I wanted to give the feature of recursively compressing or decompressing a directory. So I just wrote exactly what came to mind and came up with this</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> <span class="kw">rec</span> walk_and_action action node =
  <span class="kw">if</span> Sys<span class="kw">.</span>is_directory node
  <span class="kw">then</span> (Sys<span class="kw">.</span>readdir node
        |&gt; Array<span class="kw">.</span>to_list
        |&gt; List<span class="kw">.</span>map (Filename<span class="kw">.</span>concat node)
        |&gt; Lwt_list<span class="kw">.</span>iter_p (walk_and_action action))
  <span class="kw">else</span> action node</code></pre></div>
<p>Where <code>action</code> has type: <code>string -&gt; unit Lwt.t</code> (a function that takes a <code>string</code> and returns <code>unit Lwt.t</code>) and <code>node</code> is just a <code>string</code> for the file name. Translating the code into English, we first check if the file name represents a directory, if its a directory then we</p>
<blockquote>
<ol style="list-style-type: decimal">
<li>Read the directory’s contents</li>
<li>Convert the returned array into a list</li>
<li>Use a partially evaluated function, <code>Filename.concat node</code> and finish that computation for each of the file names in the list</li>
<li>Use correct concatenated strings to feed to <code>Lwt_list.iter_p</code> which will call the partially evaluated function <code>walk_and_action action</code> on each of the files. The <code>iter_p</code> function tells us that it will call its given function concurrently, which is very nice.</li>
</ol>
</blockquote>
<p>If its not a directory then we just call the function for the given file.</p>
<p>Notice how elegant this code is, the whole function body is just one expression and the data just flows from the output of one function as the input of the other, there’s no separation between the function calls.</p>]]></description>
    <pubDate>Wed, 07 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2015/10/07/elegant/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>

    </channel>
</rss>
