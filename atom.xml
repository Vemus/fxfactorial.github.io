<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>hyegar.com - All posts</title>
        <link>http://beancode.io</link>
        <description><![CDATA[Personal blog of Edgar Aroutiounian]]></description>
        <atom:link href="http://beancode.io/atom.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 23 Jan 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>2016-01-23-calling-ocaml-from-objective-c</title>
    <link>http://beancode.io/2016/01/23/calling-ocaml-from-objective-c/index.html</link>
    <description><![CDATA[<p>I love iOS and I love OCaml, so I’ve packaged up an OCaml compiler for iOS via opam. Now all you need to build OCaml programs on the iPhone is opam!</p>
<h1 id="first-steps">First steps</h1>
<p>You’ll need the cross compiler. Follow the README instructions mentioned <a href="https://github.com/fxfactorial/opam-ios">here</a>. This will provide you with the cross compiler based on OCaml 4.02.0.</p>
<h1 id="example-code">Example Code</h1>
<p>Now I’ll show you an example of calling OCaml from Objective-C. Much of this code will have simplifications as its an example for getting you started. Also note that dealing at the C level and the OCaml runtime can be tricky and is not for beginners.</p>
<p>Here’s the OCaml code first, assume it is named code.ml</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="dv">1</span>  <span class="kw">let</span> make_string () =
<span class="dv">2</span>    print_endline <span class="st">&quot;Hello Word from OCaml&quot;</span>;
<span class="dv">3</span>    <span class="st">&quot;Hello World &quot;</span>
<span class="dv">4</span>  
<span class="dv">5</span>  <span class="kw">let</span> () =
<span class="dv">6</span>    Callback<span class="kw">.</span>register <span class="st">&quot;make_string&quot;</span> make_string</code></pre></div>
<p>We’re essentially telling the runtime to make this function available to grab as a handle, in this case it’s a handle on a closure.</p>
<p>And now the Objective-C code, assume it is named main.c</p>
<div class="sourceCode"><pre class="sourceCode objectivec"><code class="sourceCode objectivec"> <span class="dv">1</span>  #define CAML_NAME_SPACE
 <span class="dv">2</span>  
 <span class="dv">3</span>  #import &lt;Foundation/Foundation.h&gt;
 <span class="dv">4</span>  
 <span class="dv">5</span>  #include &lt;caml/callback.h&gt;
 <span class="dv">6</span>  #include &lt;caml/mlvalues.h&gt;
 <span class="dv">7</span>  
 <span class="dv">8</span>  <span class="dt">int</span> main (<span class="dt">int</span> argc, <span class="dt">char</span> **argv)
 <span class="dv">9</span>  {
<span class="dv">10</span>    caml_startup(argv);
<span class="dv">11</span>    caml_callback(*caml_named_value(<span class="st">&quot;make_string&quot;</span>), Val_unit);
<span class="dv">12</span>    NSLog(<span class="st">@&quot;Now using objective-c code&quot;</span>);
<span class="dv">13</span>    <span class="kw">return</span> <span class="dv">0</span>;
<span class="dv">14</span>  }</code></pre></div>
<p>Its important to call <code>caml_startup</code> before any OCaml callbacks. Then we get a handle on the closure and call it with unit.</p>
<p>To compile this code you’ll need the cross-compiler which was installed by following the directions on my opam-ios repo, the command you use is:</p>
<pre class="shell"><code>$ ocamloptrev -rev 8.3 -ccopt -ObjC -cclib &#39;-framework Foundation&#39; main.c code.ml -o F</code></pre>
<p>The 8.3 is the iOS SDK you want to link against, again see the README on the github repo for opam-ios for more details.</p>
<p>The output we get, <code>F</code> is an arm executable, when we run it on the iPhone we will get an output of:</p>
<pre class="shell"><code>$ some_iphone :~/  ./F
Hello Word from OCaml
2016-01-23 22:44:04.889 F[1977:507] Now using objective-c code</code></pre>
<p>Yay!</p>]]></description>
    <pubDate>Sat, 23 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://beancode.io/2016/01/23/calling-ocaml-from-objective-c/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>2015-10-20-so-youre-learning-ocaml</title>
    <link>http://beancode.io/2015/10/20/so-youre-learning-ocaml/index.html</link>
    <description><![CDATA[<p>Today was the first day of the Introduction to Functional Programming in <code>OCaml</code> course, located <a href="https://www.france-universite-numerique-mooc.fr/courses/parisdiderot/56002/session01/about">here</a>. Apparently over 2,000 people signed up and while doubtlessly many will drop out, there will still be 2,000 more programmers that are now aware of this amazing language called <code>OCaml</code>.</p>
<h1 id="crash-course-on-the-ocaml-ecosystem.">Crash course on the OCaml ecosystem.</h1>
<p>These are some key notes that you should know.</p>
<ol style="list-style-type: decimal">
<li><p><code>opam</code> is the package manager for OCaml. It is very advanced and supports many features. The most basic of which is</p>
<pre class="shell"><code>$ opam install &lt;some_package&gt;</code></pre>
<p>For people on <code>OS X</code>, you can get it on <code>brew</code> and all the <code>Linux</code> distros should have <code>opam</code> for you to install. For Windows people, get a VM. EDIT: To be clear, OCaml can build <strong>native</strong> executables on Windows just fine, but opam doesn’t work on this platform and for a beginner you’ll waste a lot of time with environment issues or libraries that assume Unix.</p></li>
<li><p>Once you have <code>opam</code> installed, you probably want to do:</p>
<pre class="shell"><code>$ opam switch 4.02.3</code></pre>
<p>This will install the latest version of the compiler.</p></li>
<li><p><code>ocamlfind</code> is a program that predates <code>opam</code> and wraps the standard <code>OCaml</code> compilers: <code>ocamlc</code> and <code>ocamlopt</code>. The former is a byte code compiler and the latter creates native code.</p></li>
<li><p><code>ocamlbuild</code> is a tool that helps build <code>OCaml</code> programs, many people have strong opinions on it.</p></li>
<li><p><code>oasis</code> is a tool that helps abstract usage of 3, 4. I resisted it for a while and wrote Makefiles instead, don’t do that, just use oasis. The oasis flow basically goes like this: (Be aware that oasis is really finicky and its error messages are useless)</p>
<p>5.1) Create a directory.</p>
<p>5.2) Go to the directory and create a file named <strong>_oasis</strong> and directory named <code>src</code></p>
<p>5.3) Here is a template of the contents of the <strong>_oasis</strong> file</p>
<pre class="shell"><code>OASISFormat:  0.4
OCamlVersion: &gt;= 4.02.3
Name:         opam_package_name
Version:      0.1
Maintainers:  New OCaml programmer
Homepage:     http://my_coolsite.com
Synopsis:     Some short description
Authors:      Cool@me.com
License:      BSD-3-clause
Plugins:      META (0.4), DevFiles (0.4)
AlphaFeatures: ocamlbuild_more_args

Description:
  Some cool description

# This is a comment and this below creates an binary program    
Executable &lt;some_program_name&gt;
  Path: src
  BuildTools:ocamlbuild
  install: true
  MainIs: main.ml
  CompiledObject: native
  BuildDepends: package_one, package_two

# Another comment, this builds a library called pg
Library pg
  Path:         src
  # oasis will figure out the dependencies, 
  # Just list the modules you want public, 
  # Note that there&#39;s no .ml, just give the name
  Modules:      Pg
  CompiledObject: byte
  BuildDepends: some_package</code></pre>
<p>5.4) Generate the Makefile, setup.ml, configure and other build crap.</p>
<pre class="shell"><code>$ oasis setup -setup-update dynamic</code></pre>
<p>5.5) Actually build your code, yes its just a call to make.</p>
<pre class="shell"><code>$ make</code></pre>
<p>5.6) You can stop here, but you can go even further with <code>oasis2opam</code>. Install it with: <code>opam install oasis2opam</code>, then in your project’s root directory, aka the directory with the _oasis file, do: <code>oasis2opam --local</code>. This creates the <code>opam</code> directory and some meta data for the opam packaging system. Your local package can now be a first class citizen with opam just by doing this in the same project root directory:</p>
<pre class="shell"><code>$ opam pin add &lt;your_package_name&gt; . -y</code></pre></li>
<li><p><code>merlin</code> is a OCaml program that is simply amazing it drives code completion for plugins available in <code>emacs</code> and <code>vim</code>. Once you have merlin installed and running, add a <code>.merlin</code> file to your project so that <code>merlin</code> knows what packages to code complete for, a sample <code>.merlin</code> file looks like this:</p>
<pre class="shell"><code>B _build/src
S src
PKG cmdliner js_of_ocaml</code></pre>
<p>Notice how I put the <code>B _build/src</code> That sort of assumes you’re using <code>_oasis</code> and you made the <code>src</code> directory I mentioned earlier.</p></li>
<li><p>There are no full blown IDEs for OCaml, learn <code>emacs</code> or <code>vim</code>. EDIT: apparently <code>Sublime Text</code> has a merlin plugin, if you’re already familiar with Sublime Text then just stick with it, merlin is really what matters here.</p></li>
<li><p><code>utop</code> is an enhanced repl, its better than the plain <code>ocaml</code> repl. Install it with <code>opam install utop</code></p></li>
</ol>
<h1 id="library-situation">Library situation</h1>
<p><code>OCaml</code> does have a standard library but it sucks. It was only created to serve the needs of the compiler programmers, ie its not like <code>Python</code>’s standard library which has everything under the sun + the moon. There are a few standard library replacements, one is called <code>Core</code> and its provided by Jane Street. Its the library used in the <strong>Real World OCaml</strong> book/website. Another standard library replacement is called <code>Batteries</code>, this is more “community” supported. There is a more recent contender called <code>Containers</code>. For a categorized list of contemporary and well liked/must have libraries, checkout the <a href="https://github.com/rizo/awesome-ocaml">awesome-ocaml</a> repository.</p>
<h1 id="speaking-of-libraries">Speaking of Libraries…</h1>
<p>This is “functional programming,” so many of the real world libraries you’ll encounter will have Monadic interfaces, like <code>lwt</code> or Core’s <code>async</code>, both are asynchronous threading libraries, use Monads and that wacky <code>&gt;&gt;=</code> function. But you really shouldn’t fret about what a Monad is or represents, just follow the type signature and you’ll be fine. For a more detailed treatment of Monads in OCaml and a code example to talk to the <code>Stripe</code> API, see <a href="http://hyegar.com/blog/2015/09/23/let&#39;s-just-use-monads/">this</a>.</p>
<h1 id="doing-simple-tasks-shameless-plug">Doing simple tasks (shameless plug)</h1>
<p>I try using <code>OCaml</code> for literally everything and that includes going to hackathons, to make this less painful I wrote a library called <code>Podge</code> which helps with simple stuff. I don’t claim its a standard library replacement, just a library for getting stuff done. These two code samples assume the file is named <code>code.ml</code> and can be run with <code>utop code.ml</code></p>
<p>First install with opam:</p>
<pre class="shell"><code>$ opam install podge</code></pre>
<ol style="list-style-type: decimal">
<li>Reading output of a process</li>
</ol>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">#require &quot;podge&quot;</span>
<span class="kw">let</span> () = 
  Podge<span class="kw">.</span>Unix<span class="kw">.</span>read_process_output <span class="st">&quot;ls -halt&quot;</span> |&gt; List<span class="kw">.</span>iter print_endline</code></pre></div>
<p>The <code>|&gt;</code> just means piping, its piping the output of <code>read_process_output</code> into the input of the partially applied function <code>iter</code></p>
<ol style="list-style-type: decimal">
<li>Reading a file</li>
</ol>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">#require &quot;podge&quot;</span>
<span class="kw">let</span> () = 
  Podge<span class="kw">.</span>Unix<span class="kw">.</span>read_lines <span class="st">&quot;code.ml&quot;</span> |&gt; List<span class="kw">.</span>iter print_endline</code></pre></div>
<p>Similar to 1, this reads all lines of file and gives it to the input of the partially applied function <code>iter</code>.</p>
<p>These are two simple code samples from <code>Podge</code>, check out the <a href="https://github.com/fxfactorial/podge">repo</a> for other useful modules like: (The README has code examples)</p>
<ol style="list-style-type: decimal">
<li><code>Web</code> for simple HTTP requests and getting data back as JSON,</li>
<li><code>Xml</code> for querying simple XML documents</li>
<li><code>ANSITerminal</code> for creating colored shell output</li>
<li><code>String</code> which is all due to <a href="http://rgrinberg.com">Rudi Grinberg</a>.</li>
</ol>
<h1 id="what-can-you-do-with-it">What can you do with it?</h1>
<p>Loads.</p>
<ol style="list-style-type: decimal">
<li>Compilers!, lots of compilers/compiler tools are written in OCaml: Facebook uses OCaml for <a href="https://github.com/facebook/pfff">pfff</a> and <a href="https://github.com/facebook/flow">flow</a> and the first cut of Rust was written in OCaml.</li>
<li>Financial world, <a href="https://www.janestreet.com">Jane Street</a> uses OCaml for basically everything (AFAIK)</li>
<li>Systems Programming: <a href="https://ahrefs.com">ahrefs</a>, my employer, uses OCaml for heavy systems programming.</li>
<li>Kernels: Unikernels are hot right now, the most prominent one is the <a href="https://mirage.io">Mirage-OS</a> project and its all OCaml.</li>
<li>Shameless plug: I use OCaml as well for <code>js_of_ocaml</code>, in fact I’m using it to write an Electron app with a node backend (All code is OCaml compiled into JS, then run on node/Electron), see <a href="https://github.com/fxfactorial/ocaml-electron">here.</a></li>
<li>Genomics/Bioinformatics: <a href="https://github.com/hammerlab">Hammer Lab</a> in NYC uses OCaml for their genomics/sequencing work.</li>
</ol>
<p>…And I’m sure there’s more I haven’t mentioned…</p>
<h1 id="stick-with-it">Stick with it!</h1>
<p>This style of coding might be new to you or maybe its your first programming language, stick with it and continue. <code>OCaml</code> offers many awesome features and has many strengths including a very professional and pragmatic community.</p>]]></description>
    <pubDate>Tue, 20 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://beancode.io/2015/10/20/so-youre-learning-ocaml/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>2015-10-07-elegant</title>
    <link>http://beancode.io/2015/10/07/elegant/index.html</link>
    <description><![CDATA[<p>I love elegant code, code that just flows and lets you “see” how the data moves through execution. As part of my <a href="https://github.com/fxfactorial/brozip">brozip</a> application, I wanted to give the feature of recursively compressing or decompressing a directory. So I just wrote exactly what came to mind and came up with this</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> <span class="kw">rec</span> walk_and_action action node =
  <span class="kw">if</span> Sys<span class="kw">.</span>is_directory node
  <span class="kw">then</span> (Sys<span class="kw">.</span>readdir node
        |&gt; Array<span class="kw">.</span>to_list
        |&gt; List<span class="kw">.</span>map (Filename<span class="kw">.</span>concat node)
        |&gt; Lwt_list<span class="kw">.</span>iter_p (walk_and_action action))
  <span class="kw">else</span> action node</code></pre></div>
<p>Where <code>action</code> has type: <code>string -&gt; unit Lwt.t</code> (a function that takes a <code>string</code> and returns <code>unit Lwt.t</code>) and <code>node</code> is just a <code>string</code> for the file name. Translating the code into English, we first check if the file name represents a directory, if its a directory then we</p>
<blockquote>
<ol style="list-style-type: decimal">
<li>Read the directory’s contents</li>
<li>Convert the returned array into a list</li>
<li>Use a partially evaluated function, <code>Filename.concat node</code> and finish that computation for each of the file names in the list</li>
<li>Use correct concatenated strings to feed to <code>Lwt_list.iter_p</code> which will call the partially evaluated function <code>walk_and_action action</code> on each of the files. The <code>iter_p</code> function tells us that it will call its given function concurrently, which is very nice.</li>
</ol>
</blockquote>
<p>If its not a directory then we just call the function for the given file.</p>
<p>Notice how elegant this code is, the whole function body is just one expression and the data just flows from the output of one function as the input of the other, there’s no separation between the function calls.</p>]]></description>
    <pubDate>Wed, 07 Oct 2015 00:00:00 UT</pubDate>
    <guid>http://beancode.io/2015/10/07/elegant/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>2015-09-11-cool-latex</title>
    <link>http://beancode.io/2015/09/11/cool-latex/index.html</link>
    <description><![CDATA[<p>This post is going to add a lot of value to your life; I’m going to show you how to:</p>
<ol style="list-style-type: decimal">
<li>Install LaTeX on OS X, without too much junk.</li>
<li>Use org-mode on emacs along with some creature comforts</li>
<li>Use animations inside a PDF. Yes, I’m serious.</li>
</ol>
<h1 id="installing-latex">Installing LaTeX</h1>
<p>Most folks that install LaTeX on OS X probably do it with the <a href="https://tug.org/mactex/">MacTex</a> package. This is probably fine for most people, but the trouble with MacTex is the size of the install; Its huge! The last time I checked, MacTex ended up using at least 1.5 <strong>gigabytes</strong>. That’s a lot of wasted space, especially for things like the LaTeX editor (since I do my LaTeX work in emacs). So here are the steps I recommend to installing LaTeX on OS X.</p>
<h2 id="installing-latex-on-os-x">Installing LaTeX on OS X</h2>
<ol style="list-style-type: decimal">
<li>If you already have MacTex installed, get rid of it. Its pretty simple, just follow the directions <a href="https://tug.org/mactex/uninstalling.html">here</a>.</li>
<li>Install BasicTex. This gives you stuff like pdfLatex, aka the compiler and core LaTeX. You can get the package installer from <a href="http://www.tug.org/mactex/morepackages.html">here</a>.</li>
<li>Download the Tex Live Utility from <a href="https://github.com/amaxwell/tlutility">here</a>. Tex Live Utility is your new LaTeX best friend. It will let you update all packages and install new ones whenever you need them, and you will need them since you only installed BasicTex. We will use it later on in this post.</li>
</ol>
<h1 id="org-mode">Org Mode</h1>
<p>I’m going to assume that you already know what emacs is, but I’ll explain org-mode. Org-mode is an amazing mode that lets your write notes, presentation, and more. Side note, these posts are written in org-mode. I write them in org-mode, then org-mode exports them to HTML; its pretty neat and convenient.</p>
<p>Okay, back to org-mode. In org-mode, you can put some configurations, things like:</p>
<pre class="org-mode"><code>#+AUTHOR: Edgar
#+LATEX_HEADER: \usepackage{lmodern}
#+OPTIONS: toc:nil</code></pre>
<p>Writing those things out on each new <code>.org</code> file is annoying. Fortunately emacs already comes with a solution. You’ll want to add this to your <code>init.el</code></p>
<pre class="emacs-lisp"><code>;; This turns on auto-insert-mode
(auto-insert-mode)
;; This turns off the prompt that auto-insert-mode asks before 
;; it actually inserts text/code for you
(setq auto-insert-query nil)
;; This is what you&#39;ll have inserted for a new .org file
(define-skeleton my-org-defaults
  &quot;Org defaults I use&quot;
  nil
  &quot;#+AUTHOR:   Your name\n&quot;
  &quot;#+EMAIL:    your.email@gmail.com\n&quot;
  &quot;#+LANGUAGE: en\n&quot;
  &quot;#+LATEX_HEADER: \\usepackage{lmodern}\n&quot;
  &quot;#+LATEX_HEADER: \\usepackage[T1]{fontenc}\n&quot;
  &quot;#+OPTIONS:  toc:nil num:0\n&quot;)
;; This is how to tell auto-insert what to use for .org files
(define-auto-insert &quot;\\.org\\&#39;&quot; &#39;my-org-defaults)</code></pre>
<p>Now whenever you open a new <code>.org</code> file, you’ll have these common things already there in the buffer. You can do this for other modes too, I do it for common <code>#include</code> items for C coding.</p>
<h1 id="writing-latex-via-org-mode">Writing LaTeX via org-mode</h1>
<p>You’ll notice that in <code>my-org-defaults</code>, I included some items for LaTeX. I used to write LaTeX in emacs by hand using Auctex and I actually still recommend newcomers to LaTeX start by writing it by hand. I use org-mode because the writing is so much easier in it, and I can always drop down to LaTeX whenever I need to, like when I need specific packages. For example, the <code>\usepackage{lmodern}</code> is a LaTeX package for really nice modern latin font. To get this package, you’ll need to install it via the newly installed Tex Live Utility application. Just open Tex Live Utility, go to the Packages tab, search for lmodern and right click and install.</p>
<p>To export the <code>.org</code> file to PDF, just do: <code>C-c C-e l p</code>, where that last <code>p</code> can be replaced with <code>o</code> to open the newly created PDF. Another neat thing in org mode that I like is seeing LaTeX before its a PDF, that is, I want to preview the LaTeX inside the buffer. This, assuming you already have <code>imagemagick</code> installed, is easily done with <code>C-c C-x C-l</code>.</p>
<p>Just to let you know my work-flow, I usually have a buffer open with the PDF of my work and another buffer of my <code>.org</code> file. Then I export to PDF and since I have <code>doc-view-mode</code> poll for updates, I see the changes to my work nearly instantly in the PDF buffer.</p>
<h1 id="animations-in-a-pdf">Animations in a PDF</h1>
<p>For a final paper on modifications to the <a href="http://en.wikipedia.org/wiki/Perceptron">Perceptron</a> algorithm, I wanted to include a neat animation of the Perceptron converging. Naturally I did my paper in emacs. Here are the steps needed.</p>
<ol style="list-style-type: decimal">
<li>Install the <code>animate</code> package using Tex Live Utility</li>
<li><p>Add the following two lines to your <code>.org</code> file.</p>
<pre class="org-mode"><code>#+LATEX_HEADER: \usepackage{animate}
#+LATEX_HEADER: \usepackage{graphics}</code></pre></li>
<li><p>For the place where you want to add the animation, add code like the following to your <code>.org</code> file:</p>
<pre class="tex"><code>\begin{center}
%                                            fps filename from to
  \animategraphics[autoplay, loop, width=4in]{2}{p_N200_it}{1}{68}
\end{center}</code></pre>
<p>In this example, I gave it some optional arguments and said use 2 frames per second and for all the filenames that start with p_N200_it, go from 1 to 68, for example <code>p_N200_it4.png</code>.</p>
<p><strong>Note:</strong> <code>\animategraphics</code> can take other optional arguments, like <code>controls</code>. Please sure to check out its easily googlable manual for all the details.</p></li>
</ol>
<p>After exporting the PDF, you’ll have a real animation that is completely self contained in the PDF.</p>
<p><strong>Note:</strong> The Preview.app on OS X is kind of crappy and doesn’t actually animate the graphic for reasons unknown to me, I recommend you use Adobe Reader.</p>
<p>I hope this post helps makes your papers all that more exciting and rewarding.</p>]]></description>
    <pubDate>Fri, 11 Sep 2015 00:00:00 UT</pubDate>
    <guid>http://beancode.io/2015/09/11/cool-latex/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>

    </channel>
</rss>
