<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>hyegar.com - All posts</title>
        <link>http://hyegar.com</link>
        <description><![CDATA[Personal blog of Edgar Aroutiounian]]></description>
        <atom:link href="http://hyegar.com/atom.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 07 Mar 2016 00:00:00 UT</lastBuildDate>
        <item>
    <title>A Domain Generating Algorithm in OCaml</title>
    <link>http://hyegar.com/2016/03/07/dga-padcrypt-ocaml/index.html</link>
    <description><![CDATA[<p>Scrolling through twitter I saw someone mention something about the padcrypt <a href="https://en.wikipedia.org/wiki/Domain_generation_algorithm">dga</a>. Basically it generates random ish domain names.</p>
<p>Here’s an <code>OCaml</code> reimplementation of the Python code written <a href="http://johannesbader.ch/2016/03/the-dga-of-padcrypt/">here</a>.</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">module</span> D = CalendarLib<span class="kw">.</span><span class="dt">Date</span>

<span class="kw">let</span> tlds = [|<span class="st">&quot;com&quot;</span>;<span class="st">&quot;co.uk&quot;</span>; <span class="st">&quot;de&quot;</span>;<span class="st">&quot;org&quot;</span>;<span class="st">&quot;net&quot;</span>;<span class="st">&quot;eu&quot;</span>;<span class="st">&quot;info&quot;</span>;<span class="st">&quot;online&quot;</span>;
            <span class="st">&quot;co&quot;</span>; <span class="st">&quot;cc&quot;</span>; <span class="st">&quot;website&quot;</span>|]

<span class="kw">let</span> tlds_count = Array<span class="kw">.</span>length tlds
<span class="kw">let</span> nr_domains = <span class="dv">24</span> * <span class="dv">3</span>
<span class="kw">let</span> digit_mapping = <span class="st">&quot;abcdnfolmk&quot;</span>

<span class="kw">let</span> seed_string ~date i =
  Printf<span class="kw">.</span>sprintf <span class="st">&quot;%d-%d-%d|%d&quot;</span>
    (D<span class="kw">.</span>day_of_month date)
    (D<span class="kw">.</span>month date |&gt; D<span class="kw">.</span>int_of_month)
    (D<span class="kw">.</span>year date)
    i

<span class="kw">let</span> domain_generate date =
  <span class="kw">let</span> <span class="kw">rec</span> helper count accum =
    <span class="kw">if</span> count = nr_domains <span class="kw">then</span> accum
    <span class="kw">else</span> seed_string ~date count :: helper (count + <span class="dv">1</span>) accum
  <span class="kw">in</span>
  helper <span class="dv">0</span> []

<span class="kw">let</span> () =
  Nocrypto_entropy_unix<span class="kw">.</span>initialize ();
  CalendarLib<span class="kw">.</span>Date<span class="kw">.</span>today ()
  |&gt; domain_generate
  |&gt; List<span class="kw">.</span>iter <span class="kw">begin</span> <span class="kw">fun</span> date_stamp -&gt;
    <span class="kw">let</span> hashed =
      (Cstruct<span class="kw">.</span>of_string date_stamp)
      |&gt; Nocrypto<span class="kw">.</span>Hash<span class="kw">.</span>digest <span class="dt">`SHA256</span>
      |&gt; Hex<span class="kw">.</span>of_cstruct |&gt; <span class="kw">function</span> <span class="dt">`Hex</span> s -&gt; s
    <span class="kw">in</span>
    <span class="kw">let</span> domain =
      String<span class="kw">.</span>sub hashed <span class="dv">3</span> <span class="dv">16</span>
      |&gt; Stringext<span class="kw">.</span>to_list
      |&gt; List<span class="kw">.</span>map
        (<span class="kw">function</span> <span class="ch">&#39;0&#39;</span>..<span class="ch">&#39;9&#39;</span> <span class="kw">as</span> hh -&gt;
          Char<span class="kw">.</span>code hh - <span class="dv">48</span> |&gt; String<span class="kw">.</span>get digit_mapping
                | o -&gt; o)
      |&gt; Stringext<span class="kw">.</span>of_list
    <span class="kw">in</span>
    <span class="kw">let</span> tld_index =
      String<span class="kw">.</span>get hashed (String<span class="kw">.</span>length hashed - <span class="dv">1</span>)
      |&gt; Printf<span class="kw">.</span>sprintf <span class="st">&quot;0x%c&quot;</span>
      |&gt; int_of_string
      |&gt; <span class="kw">fun</span> tld -&gt; <span class="kw">if</span> tld &gt;= tlds_count <span class="kw">then</span> <span class="dv">0</span> <span class="kw">else</span> tld
    <span class="kw">in</span>
    Printf<span class="kw">.</span>sprintf <span class="st">&quot;%s.%s&quot;</span> domain (Array<span class="kw">.</span>get tlds tld_index)
    |&gt; print_endline
  <span class="kw">end</span></code></pre></div>
<p>You can build it with a simple <code>Makefile</code> like this:</p>
<div class="sourceCode"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span class="dv">all:</span>
	ocamlfind ocamlopt main.ml <span class="ch">\</span>
	<span class="ch">-</span><span class="fu">package nocrypto.unix,calendar,hex,stringext </span><span class="ch">\</span>
<span class="fu">	-linkpkg -o Dga</span></code></pre></div>
<p>and here’s a sample output:</p>
<pre class="text"><code>&gt; ./Dga 
...
abbdddmfllkbamco.com
fbfknncbfcbbmlde.website
flcfcbaocdmbfbmb.website
mkaakfkaoocealda.com
doabakblkbaffmnd.cc
llacffaobdcodbca.com
fcdebfefakffamco.co
dbbbenbaalcbkbnl.com
dkomadcbodnamfbb.com
aanamlbblmaefofc.org</code></pre>
<p>For reference the github repo is <a href="https://github.com/fxfactorial/dga-padcrypt-ocaml">here</a>.</p>]]></description>
    <pubDate>Mon, 07 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/03/07/dga-padcrypt-ocaml/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Date formating + hash digest example in OCaml</title>
    <link>http://hyegar.com/2016/03/06/get-date-string-in-ocaml/index.html</link>
    <description><![CDATA[<p>This is another blog post in my quest to improve the state of OCaml coding for the average programmer. Today’s blog post is getting a date string in OCaml, a seemingly trivial thing to do in many other programming languages, and using it in a real world hashing example.</p>
<h1 id="low-level-way">Low level way</h1>
<p>You do could it like this:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="co">(* Assume this is code.ml *)</span>
<span class="kw">let</span> time_now () =
  Unix<span class="kw">.</span>(
    <span class="kw">let</span> localtime = localtime (time ()) <span class="kw">in</span>
    Printf<span class="kw">.</span>sprintf <span class="st">&quot;[%02u:%02u:%02u]&quot;</span>
      localtime.tm_hour localtime.tm_min localtime.tm_sec)
	  
<span class="kw">let</span> () = time_now () |&gt; print_endline</code></pre></div>
<p>This will require you to link the <code>unix</code> package against your program, for example:</p>
<pre class="shell"><code>$ ocamlfind ocamlopt -package unix -linkpkg code.ml -o Time_now</code></pre>
<h1 id="higher-level-way-crypto-example">Higher level way + Crypto example</h1>
<p>At some point this low level interface might not be appropriate and you’ll want higher abstracts. <code>Calendar</code> is an package on opam that provides such abstractions; install with:</p>
<pre class="shell"><code>$ opam install calendar</code></pre>
<p>The API of <code>calendar</code>, which you’ll find under the module <code>CalendarLib</code>, is rather large. Here’s some real world code that you can reuse, built upon. The example also uses a cryptographic package which you can get with</p>
<pre class="shell"><code>$ opam install nocrypto</code></pre>
<p>and the code:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="co">(* Assume this is code.ml *)</span>
<span class="ot">module</span> D = CalendarLib<span class="kw">.</span><span class="dt">Date</span>

<span class="kw">let</span> nr_domains = <span class="dv">24</span>

<span class="kw">let</span> seed_string ~date i =
  Printf<span class="kw">.</span>sprintf
    <span class="st">&quot;%d-%d-%d:%d&quot;</span>
    (D<span class="kw">.</span>day_of_month date)
    (D<span class="kw">.</span>month date |&gt; D<span class="kw">.</span>int_of_month)
    (D<span class="kw">.</span>year date)
    i

<span class="kw">let</span> domain_generate date =
  <span class="kw">let</span> <span class="kw">rec</span> helper count accum =
    <span class="kw">if</span> count = nr_domains <span class="kw">then</span> accum
    <span class="kw">else</span> seed_string ~date count :: helper (count + <span class="dv">1</span>) accum
  <span class="kw">in</span>
  helper <span class="dv">0</span> []

<span class="kw">let</span> () =
  Nocrypto_entropy_unix<span class="kw">.</span>initialize ();
  CalendarLib<span class="kw">.</span>Date<span class="kw">.</span>today ()
  |&gt; domain_generate
  |&gt; List<span class="kw">.</span>iter <span class="kw">begin</span> <span class="kw">fun</span> date_stamp -&gt;
    Nocrypto<span class="kw">.</span>Hash<span class="kw">.</span>digest <span class="dt">`SHA256</span> (Cstruct<span class="kw">.</span>of_string date_stamp)
    |&gt; Cstruct<span class="kw">.</span>to_string |&gt; print_endline
  <span class="kw">end</span></code></pre></div>
<p>and compiling with:</p>
<pre class="shell"><code>$ ocamlfind ocamlopt -package calendar,nocrypto.unix -linkpkg code.ml -o Ex</code></pre>
<p>Yay. Be sure to check my archives for many more quick and useful posts on OCaml.</p>]]></description>
    <pubDate>Sun, 06 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/03/06/get-date-string-in-ocaml/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Getting objective-c code completion on emacs</title>
    <link>http://hyegar.com/2016/03/02/emacs-for-objc/index.html</link>
    <description><![CDATA[<p>To get full code completion for objective-c in emacs you need to:</p>
<ol style="list-style-type: decimal">
<li>Have <code>company-mode</code> installed, its a generic backend for code completion in emacs and the community loves it.</li>
<li>Add some elisp to your <code>init.el</code>.</li>
</ol>
<p>I assume you have <code>company-mode</code> already installed, this will provide <code>company-clang</code> as well which is what will provide completion.</p>
<h1 id="some-elisp">Some elisp</h1>
<p>Here is my elisp that I use, you’ll notice that I also get codecompletion on Linux for objective-c, you can too by following my other blog <a href="http://hyegar.com/2016/02/22/ios-cross-compiler/">post</a>.</p>
<pre class="common-lisp"><code>(defvar osx-base-path
  &quot;/Applications/Xcode.app/Contents/Developer/Platforms/&quot;)

(if (equal system-type &#39;darwin)
    ; Only the then clause needs a progn, else part doesn&#39;t need it.
    (progn
      ;; Forgot what this was for..think some os x issues. 
      (setenv &quot;LC_CTYPE&quot; &quot;UTF-8&quot;)
      (setq mac-option-modifier &#39;super
	    flycheck-make-executable &quot;/usr/local/bin/make&quot;
	    company-clang-executable
	    (concat &quot;/Applications/Xcode.app/Contents/Developer/&quot;
		    &quot;Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++&quot;)
	    company-clang-arguments
	    `(&quot;-std=c++11&quot;
	      &quot;-isysroot&quot;
	      ; If coding for iOS
	      ;; (concat osx-base-path
	      ;; &quot;iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk&quot;)
	      ; If coding for OS X
	      ,(concat osx-base-path
		       &quot;MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk&quot;)
	      &quot;-I&quot; &quot;/usr/include/c++/4.2.1&quot;
	      &quot;-I&quot; &quot;/usr/local/lib/ocaml/&quot;)
	    flycheck-c/c++-clang-executable
	    (concat &quot;/Applications/Xcode.app/Contents/Developer/&quot;
		    &quot;Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++&quot;)
	    mac-command-modifier &#39;meta))
  (set-face-attribute &#39;default nil :height 110)
  (setq company-clang-executable &quot;armv7-apple-darwin11-clang&quot;
	company-clang-arguments &#39;(&quot;-std=c++11&quot;
				  &quot;-isysroot&quot;
				  &quot;/home/gar/.nix-profile/iPhoneOS9.2.sdk&quot;
				  &quot;-I/usr/local/lib/ocaml/&quot;)))

(setq company-backends &#39;(company-clang
			 company-capf
			 company-c-headers
			 company-jedi))
(add-to-list &#39;auto-mode-alist &#39;(&quot;\\.mm\\&#39;&quot; . objc-mode))
(global-set-key (kbd &quot;M-/&quot;) &#39;company-complete)</code></pre>
<p>Some of that is alittle opinionated and but the <code>company-clang-arguments</code> is the most important part really. Update the SDKs file name ending as this post becomes outdated.</p>
<p>Here’s what you should expect to see:</p>
<p><img src="/images/company-objc.png" />)</p>]]></description>
    <pubDate>Wed, 02 Mar 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/03/02/emacs-for-objc/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Let's make a webkit browser in Objective-C++</title>
    <link>http://hyegar.com/2016/02/26/lets-make-a-browser/index.html</link>
    <description><![CDATA[<p>This is a short post showing you how to write a simple <code>OS X</code> based web browser using <code>Objective-C</code> in just 80 lines of code and with no XCode. Its very valuable because making a Cocoa application without XCode is sometimes kind of hard.</p>
<p>First let’s start with the <code>Makefile</code></p>
<div class="sourceCode"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span class="dt">opts </span><span class="ch">:=</span><span class="st"> -std=c++11 -fobjc-arc</span>
<span class="dt">fws </span><span class="ch">:=</span><span class="st"> -framework Cocoa -framework Webkit</span>
<span class="dt">libs </span><span class="ch">:=</span><span class="st"> -lc++</span>
<span class="dt">exec </span><span class="ch">:=</span><span class="st"> Prog</span>
<span class="dt">wrapper </span><span class="ch">:=</span><span class="st"> xcrun -r</span>

<span class="dv">all:</span>
	<span class="ch">${</span><span class="dt">wrapper</span><span class="ch">}</span> clang++ <span class="ch">${</span><span class="dt">opts</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">fws</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">libs</span><span class="ch">}</span> main.mm -o <span class="ch">${</span><span class="dt">exec</span><span class="ch">}</span>
	./<span class="ch">${</span><span class="dt">exec</span><span class="ch">}</span></code></pre></div>
<p>We’re going to use Webkit, ARC, C++11 and immediately run the program.</p>
<p>Now the program, I’m going to assume you are familiar with Cocoa development, Objective-C.</p>
<div class="sourceCode"><pre class="sourceCode objectivec"><code class="sourceCode objectivec"><span class="co">/* -*- objc -*- */</span>

<span class="ot">#import &lt;Foundation/Foundation.h&gt;</span>
<span class="ot">#import &lt;Webkit/WebKit.h&gt;</span>
<span class="ot">#import &lt;iostream&gt;</span>

<span class="kw">@interface</span> Window_delegate : NSObject &lt;NSWindowDelegate&gt;
<span class="kw">@end</span>

<span class="kw">@implementation</span> Window_delegate

-(<span class="dt">void</span>)windowWillClose:(id)a
{
  NSLog(<span class="st">@&quot;Exiting&quot;</span>);
  exit(<span class="dv">0</span>);
}
<span class="kw">@end</span>

<span class="kw">@interface</span> App_delegate : NSObject &lt;NSApplicationDelegate&gt;
@property (weak, nonatomic) NSWindow *_window;
<span class="kw">@end</span>

<span class="kw">@implementation</span> App_delegate

-(instancetype)init:(NSWindow*)parent_window
{
  <span class="kw">if</span> (<span class="kw">self</span> = [<span class="kw">super</span> init]) {
    <span class="kw">self</span>._window = parent_window;
    <span class="kw">return</span> <span class="kw">self</span>;
  }
  <span class="kw">return</span> nil;
}

-(<span class="dt">void</span>)applicationDidFinishLaunching:(NSNotification *)a_notification
{
  WebView *wb = [[WebView alloc] initWithFrame:<span class="kw">self</span>._window.contentView.frame];
  [<span class="kw">self</span>._window.contentView addSubview:wb];
  [[wb mainFrame]
    loadRequest:[NSURLRequest
		  requestWithURL:[NSURL URLWithString:<span class="st">@&quot;http://hyegar.com&quot;</span>]]];
}

<span class="kw">@end</span>

<span class="dt">void</span> start_program(<span class="dt">void</span>)
{
  NSApplication *app = [NSApplication sharedApplication];
  <span class="co">// Critical to have this so that you can add menus</span>
  [NSApp setActivationPolicy:NSApplicationActivationPolicyRegular];

  NSWindow *window =
    [[NSWindow alloc]
      initWithContentRect:NSMakeRect(<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">800</span>, <span class="dv">600</span>)
		styleMask: NSTitledWindowMask | NSClosableWindowMask | NSMiniaturizableWindowMask
		  backing:NSBackingStoreBuffered
		    defer:NO];

  [window center];
  window.title = <span class="st">@&quot;Hello World&quot;</span>;
  [window makeKeyAndOrderFront:window];

  Window_delegate *d = [Window_delegate new];
  window.delegate = d;

  App_delegate *application_delegate = [[App_delegate alloc] init:window];
  app.delegate = application_delegate;
  [app activateIgnoringOtherApps:YES];
  [app run];
}

<span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span> **argv)
{
  std::cout &lt;&lt; <span class="st">&quot;Starting Application</span><span class="ch">\n</span><span class="st">&quot;</span>;
  @autoreleasepool {
    start_program();
  }
}</code></pre></div>
<p>a simple <code>make</code> invocation at the command line will build and run this program which should open up a page to this blog.</p>
<p>Notice that <code>C++</code> wasn’t really used, I added it here to make this blog post content rich and code sample very reusable for you as a starter post.</p>
<p>A post in the future will show you how to add <code>NSMenu</code>(s) to this application.</p>]]></description>
    <pubDate>Fri, 26 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/02/26/lets-make-a-browser/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Let's hack on Facebook flow</title>
    <link>http://hyegar.com/2016/02/25/lets-hack-on-flow/index.html</link>
    <description><![CDATA[<p>I’m writing this post for the JavaScript developer that wants to hack on flow but doesn’t know OCaml and is eager enough to learn some OCaml in pursuit of their hacking goals.</p>
<h1 id="getting-started.">Getting started.</h1>
<p>You’ll need to have <code>opam</code> installed, it is OCaml’s package manager. On <code>OS X</code> you can get it with <code>brew install opam</code>, on <code>debian</code> just use apt-get’s version and if on <code>Ubuntu</code> use this <a href="https://launchpad.net/~avsm/+archive/ubuntu/ppa">ppa</a></p>
<p>The very act of installing <code>opam</code> should have also installed a compiler, which we’ll need for building <code>flow</code>.</p>
<p>For completeness’s sake, we’ll do:</p>
<pre class="shell"><code>$ opam install ocamlfind ocamlbuild</code></pre>
<p>This should provide us with all the tools we need to build flow.</p>
<h1 id="building-flow-and-setting-goals">Building Flow and setting goals</h1>
<p>Now let’s build flow</p>
<pre class="shell"><code>$ git clone https://github.com/facebook/flow
$ cd flow
$ make</code></pre>
<p>and a sanity check:</p>
<pre class="shell"><code>$ bin/flow examples/01_HelloWorld
The flow server&#39;s version didn&#39;t match the client&#39;s, so it exited.
Going to launch a new one.

Launching Flow server for /Users/Edgar/Repos/flow/examples/01_HelloWorld
Spawned flow server (child pid=37837)
Logs will go to /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log
examples/01_HelloWorld/hello.js:7
  7: foo(&quot;Hello, world!&quot;);
     ^^^^^^^^^^^^^^^^^^^^ function call
  4:   return x*10;
              ^ string. This type is incompatible with
  4:   return x*10;
              ^^^^ number


Found 1 error</code></pre>
<p>this is expected of course. Let’s say our goal is to add some extra behavior around string <code>This type is incompatible</code>. First we try to find it.</p>
<pre class="shell"><code>$ cd src
$ grep -nIr &quot;This type is incompatible&quot; .</code></pre>
<p>Of the many hits we get we see that only two end in <code>.ml</code> which is the file extension for <code>OCaml</code> source code.</p>
<pre><code>./typing/flow_js.ml:3586:      let msg = &quot;This type is incompatible with&quot; in
./typing/flow_js.ml:3772:    &quot;This type is incompatible with&quot;</code></pre>
<p>Let’s open the second one on line <code>3772</code>, we see this function</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> <span class="st">&quot;This type is incompatible with&quot;</span></code></pre></div>
<p>it looks a little bit weird because it starts with an <code>and</code>. That’s okay, the <code>and</code> means that its being used in a function before its defined, otherwise it would have been:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> <span class="st">&quot;This type is incompatible with&quot;</span></code></pre></div>
<p>The function is named <code>err_msg</code>, it takes <code>l</code> and <code>u</code> and produces a <code>string</code>.</p>
<p>Let’s add a prefix to the string, we’ll change it to:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> <span class="st">&quot;Hello JS World-&gt; This type is incompatible with&quot;</span></code></pre></div>
<p>for completeness sake I assume you’re still in the <code>src</code> directory.</p>
<pre class="shell"><code>$ cd ..
$ make clean
$ make
$ bin/flow examples/01_HelloWorld 
The flow server&#39;s version didn&#39;t match the client&#39;s, so it exited.
Going to launch a new one.

Launching Flow server for /Users/Edgar/Repos/flow/examples/01_HelloWorld
Spawned flow server (child pid=40942)
Logs will go to /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log
examples/01_HelloWorld/hello.js:7
  7: foo(&quot;Hello, world!&quot;);
     ^^^^^^^^^^^^^^^^^^^^ function call
  4:   return x*10;
              ^ string. Hello JS World -&gt; This type is incompatible with
  4:   return x*10;
              ^^^^ number


Found 1 error</code></pre>
<p>Yay, we found the spot and changed it.</p>
<h1 id="now-lets-iterate-on-our-success">Now let’s iterate on our success</h1>
<p>Great, we changed the string, but let’s say we want to have some other stuff happen, let’s try some printing to the screen. We change <code>err_msg</code> to this instead:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> <span class="kw">begin</span>
    print_endline <span class="st">&quot;Hey Coder Reading hyegar.com&quot;</span>;
    <span class="st">&quot;Hello JS World -&gt; This type is incompatible with&quot;</span>
  <span class="kw">end</span></code></pre></div>
<h2 id="interesting-sidenotes">Interesting Sidenotes</h2>
<p>The <code>begin</code>, <code>end</code> are just syntax. I could have also written it using <code>( )</code> like so:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> (
    print_endline <span class="st">&quot;Hey Coder Reading hyegar.com&quot;</span>;
    <span class="st">&quot;Hello JS World -&gt; This type is incompatible with&quot;</span>)</code></pre></div>
<p>More interesting is the usage of <code>;</code>. First think to yourself, what is the return value of printing to the screen, nothing really. In OCaml we represent side effect and dummy values with <code>()</code>, said outloud as unit and written in type signatures as <code>unit</code>. When you see <code>unit</code> in a signature then it usually means the function is doing some kind of side effect like printing to screen or talking to a db.</p>
<p>So I could have also written it as:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">and</span> err_msg l u =
  <span class="kw">if</span> is_use u
  <span class="kw">then</span> spf <span class="st">&quot;%s%s&quot;</span> (err_operation u) (err_value l)
  <span class="kw">else</span> (
    <span class="kw">let</span> () = print_endline <span class="st">&quot;Hey Coder Reading hyegar.com&quot;</span> <span class="kw">in</span>
    <span class="st">&quot;Hello JS World -&gt; This type is incompatible with&quot;</span>)</code></pre></div>
<p>but the <code>;</code> is simplier and shorter.</p>
<p>Back to our coding:</p>
<p>…and now we do the same procedure as before including the <code>make clean</code> step. Now we run the code</p>
<pre class="shell"><code>$ bin/flow examples/01_HelloWorld
The flow server&#39;s version didn&#39;t match the client&#39;s, so it exited.
Going to launch a new one.

Launching Flow server for /Users/Edgar/Repos/flow/examples/01_HelloWorld
Spawned flow server (child pid=43811)
Logs will go to /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log
examples/01_HelloWorld/hello.js:7
  7: foo(&quot;Hello, world!&quot;);
     ^^^^^^^^^^^^^^^^^^^^ function call
  4:   return x*10;
              ^ string. Hello JS World -&gt; This type is incompatible with
  4:   return x*10;
              ^^^^ number


Found 1 error</code></pre>
<p>But where is our printed string of <code>Hey Coder Reading hyegar.com</code>?</p>
<h1 id="put-on-your-thinking-hat">Put on your thinking hat</h1>
<p>First clue is this: the error message is being created by the flow server. Many servers use logs and will redirect stdout, stderr to those logs, just makes sense to do that. Second clue is that <code>print_endline</code> prints to <code>stdout</code> and the third and final clue is that <code>flow</code> itself said at the beginning of invocation that:</p>
<pre><code>Logs will go to /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log</code></pre>
<p>and now we do a simple cat on this log file, yours will be named something unique to your machine, and see our calls to <code>print_endline</code> being made a surprisingly large number of times (Perhaps a question for the <code>flow</code> developers themselves)</p>
<pre class="shell"><code>cat /private/tmp/flow/zSUserszSEdgarzSReposzSflowzSexampleszS01_HelloWorld.log             ⏎
[2016-02-25 00:58:54] Initializing Server (This might take some time)
[2016-02-25 00:58:54] executable=/Users/Edgar/Repos/flow/bin/flow
[2016-02-25 00:58:54] version=0.22.0
[2016-02-25 00:58:54] Parsing
[2016-02-25 00:58:54] Building package heap
[2016-02-25 00:58:54] Running local inference
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
Hey Coder Reading hyegar.com
[2016-02-25 00:58:55] Re-resolving directly dependent files
[2016-02-25 00:58:55] Calculating dependencies
[2016-02-25 00:58:55] Merging
[2016-02-25 00:58:55] Done
[2016-02-25 00:58:55] Server is READY
[2016-02-25 00:58:55] Took 0.431947 seconds to initialize.
[2016-02-25 00:58:55] Status: Error</code></pre>
<p>And there you have it, now you start hacking on <code>OCaml</code> in flow. Be sure to check out my numerous other blog posts about <code>OCaml</code> including the jargon and build situation located <a href="http://hyegar.com/2015/10/20/so-youre-learning-ocaml/">here</a></p>]]></description>
    <pubDate>Thu, 25 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/02/25/lets-hack-on-flow/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Use OCaml to create statically typed HTML</title>
    <link>http://hyegar.com/2016/02/24/tyxml-ocaml-example/index.html</link>
    <description><![CDATA[<h1 id="motivation">Motivation</h1>
<p>This blog post is part of my effort to make OCaml libraries, and therefore OCaml itself, more accessible and documented. We’ll focus on generating statically typed HTML using the <code>tyxml</code> package.</p>
<h1 id="simple-starter-code">Simple Starter code</h1>
<p>Let’s start by installing <code>tyxml</code> itself, we can do that with:</p>
<pre class="shell"><code>$ opam install tyxml</code></pre>
<p>And here’s the OCaml code:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">open</span> Html5<span class="kw">.</span>M

<span class="kw">let</span> this_title = title (pcdata <span class="st">&quot;Your Cool Web Page&quot;</span>)

<span class="kw">let</span> image_box =
  div ~a:[a_id <span class="st">&quot;image_box&quot;</span>]
    []

<span class="kw">let</span> links_box =
  ul ~a:[a_class [<span class="st">&quot;links_bar&quot;</span>]; a_id <span class="st">&quot;links_bar&quot;</span>]
    [li ~a:[a_id <span class="st">&quot;home_click&quot;</span>]
       [pcdata <span class="st">&quot;My Musings&quot;</span>];
     li ~a:[a_id <span class="st">&quot;about_click&quot;</span>]
       [pcdata <span class="st">&quot;About Me&quot;</span>];
     li ~a:[a_id <span class="st">&quot;blog_posts_click&quot;</span>]
       [pcdata <span class="st">&quot;Blog&quot;</span>];
     li ~a:[a_id <span class="st">&quot;hackathons_click&quot;</span>]
       [pcdata <span class="st">&quot;Hackathons&quot;</span>]]

<span class="kw">let</span> common_footer =
  footer ~a:[a_id <span class="st">&quot;footer_box&quot;</span>]
    [p [pcdata <span class="st">&quot;This site was made with &quot;</span>;
        a ~a:[a_href <span class="st">&quot;http://ocaml.org&quot;</span>] [pcdata <span class="st">&quot;OCaml&quot;</span>];
        pcdata <span class="st">&quot; and &quot;</span>;
        a ~a:[a_href <span class="st">&quot;https://www.gnu.org/software/emacs/&quot;</span>] [pcdata <span class="st">&quot;emacs&quot;</span>]]]

<span class="kw">let</span> home_content =
  div
    [h2
       [pcdata <span class="st">&quot;Hello Coder&quot;</span>]]

<span class="kw">let</span> main_payload =
  div ~a:[a_id <span class="st">&quot;payload&quot;</span>]
    [home_content]

<span class="kw">let</span> common_nav =
  nav [links_box]

<span class="kw">let</span> content_box =
  div ~a:[a_id <span class="st">&quot;content_box&quot;</span>]
    [common_nav;
     main_payload;
     common_footer]

<span class="kw">let</span> main_script =
  script ~a:[a_src (Xml<span class="kw">.</span>uri_of_string <span class="st">&quot;main.js&quot;</span>)] (pcdata <span class="st">&quot;&quot;</span>)

<span class="kw">let</span> home_page_doc =
  html (head this_title
          [link ~rel:[<span class="dt">`Stylesheet</span>] ~href:<span class="st">&quot;home.css&quot;</span> ();])
    (body [image_box; content_box; main_script])

<span class="kw">let</span> pages = [(<span class="st">&quot;index.html&quot;</span>, home_page_doc)]

<span class="kw">let</span> () =
  List<span class="kw">.</span>iter <span class="kw">begin</span> <span class="kw">fun</span> (page_name, a_page) -&gt;
    Printf<span class="kw">.</span>sprintf <span class="st">&quot;Generating: %s&quot;</span> page_name |&gt; print_endline;
    <span class="kw">let</span> file_handle = open_out page_name <span class="kw">in</span>
    Html5<span class="kw">.</span>P<span class="kw">.</span>print (output_string file_handle) a_page;
    close_out file_handle;
    <span class="kw">match</span> Sys<span class="kw">.</span>command (Printf<span class="kw">.</span>sprintf <span class="st">&quot;tidy -im -ashtml %s&quot;</span> page_name) <span class="kw">with</span>
    | <span class="dv">0</span> -&gt; ()
    | c -&gt;
      print_endline <span class="st">&quot;You don&#39;t have tidy, no pretty printing of html&quot;</span>
  <span class="kw">end</span>
    pages</code></pre></div>
<p>Notice the example include a script tag usage and CSS usage. This is using just <code>tyxml</code> and the <code>stdlib</code>.</p>
<p>For completeness, here’s the CSS followed by the JavaScript and finally the Makefile to build it all</p>
<div class="sourceCode"><pre class="sourceCode css"><code class="sourceCode css"><span class="fl">#links_bar</span> li <span class="kw">{</span>
    <span class="kw">margin:</span><span class="dt">1em</span><span class="kw">;</span>
    <span class="kw">padding:</span><span class="dt">0.4em</span><span class="kw">;</span>
    <span class="kw">font-size:</span><span class="dt">large</span><span class="kw">;</span>
    <span class="kw">display:</span><span class="dt">inline</span><span class="kw">;</span>
    <span class="kw">cursor:</span><span class="dt">pointer</span><span class="kw">;</span>
    <span class="kw">border:</span><span class="dt">none</span><span class="kw">;</span>
    <span class="kw">border-radius:</span><span class="dt">0px</span><span class="kw">;</span>
    <span class="kw">transition:</span><span class="dt">.2s</span> linear<span class="kw">;</span>
    <span class="kw">text-align:</span><span class="dt">center</span><span class="kw">;</span>
<span class="kw">}</span></code></pre></div>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="st">&quot;use strict&quot;</span><span class="op">;</span>

<span class="kw">var</span> handle <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&quot;payload&quot;</span>)<span class="op">;</span>

<span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Hello World&quot;</span>)<span class="op">;</span>
<span class="va">console</span>.<span class="at">log</span>(handle)<span class="op">;</span></code></pre></div>
<div class="sourceCode"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span class="dt">site_gen </span><span class="ch">:=</span><span class="st"> make_site</span>

<span class="dv">all:</span>
	ocamlfind ocamlc site_html.ml -package tyxml -linkpkg -o <span class="ch">${</span><span class="dt">site_gen</span><span class="ch">}</span>
	./<span class="ch">${</span><span class="dt">site_gen</span><span class="ch">}</span>

<span class="dv">clean:</span>
	rm -f *.cmo *.cmt *.cmi <span class="ch">${</span><span class="dt">site_gen</span><span class="ch">}</span> index.html</code></pre></div>
<p>This all creates an <code>index.html</code> file that you can open in your browser. This example is also included in the <code>tyxml</code> source code under <code>examples</code>. I hope this helps you get started with OCaml easier.</p>]]></description>
    <pubDate>Wed, 24 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/02/24/tyxml-ocaml-example/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Getting an iOS compiler on Linux, full Objective-C support</title>
    <link>http://hyegar.com/2016/02/22/ios-cross-compiler/index.html</link>
    <description><![CDATA[<h1 id="the-problem">The problem</h1>
<p>Lately I’ve been doing iPhone low level debugging, forensics, and reverse engineering. For that I need an <code>iOS</code> compiler and that has usually only been available on <code>OS X</code>. However my day time development environment is Linux which clearly doesn’t have an <code>objective-c</code> runtime or libraries…how to solve this?</p>
<h1 id="the-solution">The solution</h1>
<p>I found this <a href="https://github.com/tpoechtrager/osxcross">project</a> but it was very hands on and difficult to reproduce on multiple machines. How could I reliably build this code? My solution was <code>NixOS</code>, specifically the <code>nixpkgs</code> package manager (I won’t go into the benefits of <code>Nix</code> in this post). Now you can also benefit from this work by getting an <code>armv7</code> iOS cross compiler for up to <code>iOS 9.2</code> by simply doing:</p>
<pre class="shell"><code>$ nix-env -i clang ios-cross-compile</code></pre>
<p>This will crap out initially because I cannot redistribute iOS SDKs, but it does give you instructions on how to manually add something to the <code>nix-store</code>. After you follow the instructions run the command again and then you’ll have all these tools</p>
<pre><code>armv7-apple-darwin11-ar                 armv7-apple-darwin11-nm
armv7-apple-darwin11-as                 armv7-apple-darwin11-nmedit
armv7-apple-darwin11-bitcode_strip      armv7-apple-darwin11-ObjectDump
armv7-apple-darwin11-checksyms          armv7-apple-darwin11-otool
armv7-apple-darwin11-clang              armv7-apple-darwin11-pagestuff
armv7-apple-darwin11-clang++            armv7-apple-darwin11-ranlib
armv7-apple-darwin11-codesign_allocate  armv7-apple-darwin11-redo_prebinding
armv7-apple-darwin11-dyldinfo           armv7-apple-darwin11-seg_addr_table
armv7-apple-darwin11-indr               armv7-apple-darwin11-segedit
armv7-apple-darwin11-install_name_tool  armv7-apple-darwin11-seg_hack
armv7-apple-darwin11-ld                 armv7-apple-darwin11-size
armv7-apple-darwin11-libtool            armv7-apple-darwin11-strings
armv7-apple-darwin11-lipo               armv7-apple-darwin11-strip
armv7-apple-darwin11-machocheck         armv7-apple-darwin11-unwinddump</code></pre>
<p>…installed and they will work for SDK <code>7.0-9.2</code>!</p>
<h1 id="stay-tuned">Stay tuned</h1>
<p>I’ll have more blog posts lined up including:</p>
<ol style="list-style-type: decimal">
<li><p>How to get correct code completion for objective-c on Linux in emacs</p></li>
<li><p>Creating iPhone command line tools, tweaks in C++, Objective-C using theos.</p></li>
</ol>]]></description>
    <pubDate>Mon, 22 Feb 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/02/22/ios-cross-compiler/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Proxy yourself</title>
    <link>http://hyegar.com/2016/01/24/see-http-traffic-with-proxy/index.html</link>
    <description><![CDATA[<p>Often times we want to see our network traffic in an organized way, one tool we can use is <code>tcpdump</code> but its a pretty low level tool and often times HTTP is all we actually care about.</p>
<h1 id="mitmproxy-man-in-the-middle-proxy">mitmproxy (man in the middle proxy)</h1>
<p>I’ve been using <code>mitmproxy</code>, its an incredible Python tool that is designed for HTTP and I especially love the command line ncurses interface. Its designed for man in the middle attacks but you can also use it as a debugging tool. Its installable with <code>pip</code> but I just settle for the version that is present on the package manager. With <code>mitmproxy</code> we’ll see all the HTTP traffic in a clean and organized way; <code>mitmproxy</code> is MUCH nicer than using squid and the icky configurations that come along with squid.</p>
<h1 id="example">Example</h1>
<p>This example was tested and works on Ubuntu 14.04 and also worked on an Ubuntu 14.04 VM running on VMWare on OS X.</p>
<p>Essentially we will send all IP traffic from our local machine through <code>mitmproxy</code> as a proxy, this is apparently called a local transparent proxy.</p>
<p>First we set up some rules for the Linux kernel:</p>
<p>I’m going to assume you have another Unix account named mitm_account, yes two accounts are needed.</p>
<pre class="shell"><code>$ sudo iptables -t nat -A OUTPUT -p tcp \
  -m owner ! --uid-owner mitm_account \
  --dport 443 -j REDIRECT --to-port 9001</code></pre>
<p>This looks complicated, you can read up on the <code>iptables</code> man page for all the nitty gritty details. I will try to get a <code>OS X</code> equivalent as well. We also do this same command over, but change <code>--dport</code> to 80 for regular HTTP traffic as well.</p>
<p>Note the <code>mitm_account</code>. This is the name of some other account, you’ll need to have two Unix accounts for this to work and <code>mitm_account</code> is the Unix account we’ll use that will actually run the <code>mitmproxy</code> program.</p>
<p>Then we’ll open another shell and change users to mitm_account and run:</p>
<pre class="shell"><code>$ mitmproxy -T -p 9001</code></pre>
<p>And this will start the proxy interceptions.</p>]]></description>
    <pubDate>Sun, 24 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/01/24/see-http-traffic-with-proxy/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Calling OCaml from Objective-C</title>
    <link>http://hyegar.com/2016/01/23/calling-ocaml-from-objective-c/index.html</link>
    <description><![CDATA[<p>I love iOS and I love OCaml, so I’ve packaged up an OCaml compiler for iOS via opam. Now all you need to build OCaml programs on the iPhone is opam!</p>
<h1 id="first-steps">First steps</h1>
<p>You’ll need the cross compiler. Follow the README instructions mentioned <a href="https://github.com/fxfactorial/opam-ios">here</a>. This will provide you with the cross compiler based on OCaml 4.02.0.</p>
<h1 id="example-code">Example Code</h1>
<p>Now I’ll show you an example of calling OCaml from Objective-C. Much of this code will have simplifications as its an example for getting you started. Also note that dealing at the C level and the OCaml runtime can be tricky and is not for beginners.</p>
<p>Here’s the OCaml code first, assume it is named code.ml</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="dv">1</span>  <span class="kw">let</span> make_string () =
<span class="dv">2</span>    print_endline <span class="st">&quot;Hello Word from OCaml&quot;</span>;
<span class="dv">3</span>    <span class="st">&quot;Hello World &quot;</span>
<span class="dv">4</span>  
<span class="dv">5</span>  <span class="kw">let</span> () =
<span class="dv">6</span>    Callback<span class="kw">.</span>register <span class="st">&quot;make_string&quot;</span> make_string</code></pre></div>
<p>We’re essentially telling the runtime to make this function available to grab as a handle, in this case it’s a handle on a closure.</p>
<p>And now the Objective-C code, assume it is named main.c</p>
<div class="sourceCode"><pre class="sourceCode objectivec"><code class="sourceCode objectivec"> <span class="dv">1</span>  #define CAML_NAME_SPACE
 <span class="dv">2</span>  
 <span class="dv">3</span>  #import &lt;Foundation/Foundation.h&gt;
 <span class="dv">4</span>  
 <span class="dv">5</span>  #include &lt;caml/callback.h&gt;
 <span class="dv">6</span>  #include &lt;caml/mlvalues.h&gt;
 <span class="dv">7</span>  
 <span class="dv">8</span>  <span class="dt">int</span> main (<span class="dt">int</span> argc, <span class="dt">char</span> **argv)
 <span class="dv">9</span>  {
<span class="dv">10</span>    caml_startup(argv);
<span class="dv">11</span>    caml_callback(*caml_named_value(<span class="st">&quot;make_string&quot;</span>), Val_unit);
<span class="dv">12</span>    NSLog(<span class="st">@&quot;Now using objective-c code&quot;</span>);
<span class="dv">13</span>    <span class="kw">return</span> <span class="dv">0</span>;
<span class="dv">14</span>  }</code></pre></div>
<p>Its important to call <code>caml_startup</code> before any OCaml callbacks. Then we get a handle on the closure and call it with unit.</p>
<p>To compile this code you’ll need the cross-compiler which was installed by following the directions on my opam-ios repo, the command you use is:</p>
<pre class="shell"><code>$ ocamloptrev -rev 8.3 -ccopt -ObjC -cclib &#39;-framework Foundation&#39; main.c code.ml -o F</code></pre>
<p>The 8.3 is the iOS SDK you want to link against, again see the README on the github repo for opam-ios for more details.</p>
<p>The output we get, <code>F</code> is an arm executable, when we run it on the iPhone we will get an output of:</p>
<pre class="shell"><code>$ some_iphone :~/  ./F
Hello Word from OCaml
2016-01-23 22:44:04.889 F[1977:507] Now using objective-c code</code></pre>
<p>Yay!</p>]]></description>
    <pubDate>Sat, 23 Jan 2016 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2016/01/23/calling-ocaml-from-objective-c/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>
<item>
    <title>Write OCaml, run on node</title>
    <link>http://hyegar.com/2015/12/03/write_ocaml_on_node/index.html</link>
    <description><![CDATA[<p>I’ve been exposed to Node, its an amazing ecosystem with great cross platform support and a great standard library; my only issue is <strong>JavaScript</strong>. So I’ve been writing several libraries, bindings, that compile OCaml to JavaScript which I then run on <code>node</code>.</p>
<h1 id="sample-code">Sample Code</h1>
<p>Here are some working examples, many are directly from the README at <a href="https://github.com/fxfactorial/ocaml-nodejs/blob/master/README.md">ocaml-nodejs</a>.</p>
<p><strong>Multicast DNS over UDP sockets, only for the local network, like a no config p2p chat application.</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"> <span class="dv">1</span>  <span class="ot">open</span> Nodejs
 <span class="dv">2</span>  
 <span class="dv">3</span>  <span class="ot">module</span> U = Yojson<span class="kw">.</span>Basic<span class="kw">.</span><span class="dt">Util</span>
 <span class="dv">4</span>  
 <span class="dv">5</span>  <span class="kw">let</span> (multicast_addr, bind_addr, port) = <span class="st">&quot;224.1.1.1&quot;</span>, <span class="st">&quot;0.0.0.0&quot;</span>, <span class="dv">6811</span>
 <span class="dv">6</span>  
 <span class="dv">7</span>  <span class="kw">let</span> () =
 <span class="dv">8</span>    Random<span class="kw">.</span>self_init ();
 <span class="dv">9</span>    <span class="kw">let</span> p = <span class="kw">new</span> process <span class="kw">in</span>
<span class="dv">10</span>    <span class="kw">let</span> user_name = <span class="dt">ref</span> (Printf<span class="kw">.</span>sprintf <span class="st">&quot;User:%d&quot;</span> (Random<span class="kw">.</span><span class="dt">int</span> <span class="dv">10000</span>)) <span class="kw">in</span>
<span class="dv">11</span>    <span class="kw">let</span> listener = Udp_datagram<span class="kw">.</span>(create_socket ~reuse_address:<span class="kw">true</span> <span class="dt">Udp4</span>) <span class="kw">in</span>
<span class="dv">12</span>    <span class="kw">let</span> sender = Udp_datagram<span class="kw">.</span>(create_socket ~reuse_address:<span class="kw">true</span> <span class="dt">Udp4</span>) <span class="kw">in</span>
<span class="dv">13</span>  
<span class="dv">14</span>    listener#bind ~port ~address:multicast_addr ~f:<span class="kw">begin</span> <span class="kw">fun</span> () -&gt;
<span class="dv">15</span>      listener#add_membership multicast_addr;
<span class="dv">16</span>      listener#set_broadcast <span class="kw">true</span>;
<span class="dv">17</span>      listener#set_multicast_loopback <span class="kw">true</span>
<span class="dv">18</span>    <span class="kw">end</span> ();
<span class="dv">19</span>  
<span class="dv">20</span>  
<span class="dv">21</span>    listener#on_message <span class="kw">begin</span> <span class="kw">fun</span> b resp -&gt;
<span class="dv">22</span>  
<span class="dv">23</span>      <span class="kw">let</span> handle = b#to_string () |&gt; json_of_string <span class="kw">in</span>
<span class="dv">24</span>      <span class="kw">if</span> (handle &lt;!&gt; <span class="st">&quot;id&quot;</span> |&gt; Js<span class="kw">.</span>to_string) &lt;&gt; !user_name
<span class="dv">25</span>      <span class="kw">then</span> print_string (handle &lt;!&gt; <span class="st">&quot;message&quot;</span> |&gt; Js<span class="kw">.</span>to_string)
<span class="dv">26</span>  
<span class="dv">27</span>    <span class="kw">end</span>;
<span class="dv">28</span>  
<span class="dv">29</span>    p#stdin#on_data <span class="kw">begin</span> <span class="kw">function</span>
<span class="dv">30</span>      | <span class="dt">String</span> _ -&gt; ()
<span class="dv">31</span>      | <span class="dt">Buffer</span> b -&gt;
<span class="dv">32</span>        <span class="kw">let</span> msg = b#to_string () <span class="kw">in</span>
<span class="dv">33</span>        <span class="co">(* This needs to be redone with Re_pcre *)</span>
<span class="dv">34</span>        <span class="kw">if</span> String<span class="kw">.</span>length msg &gt; <span class="dv">10</span> <span class="kw">then</span> <span class="kw">begin</span>
<span class="dv">35</span>          <span class="kw">let</span> modify = String<span class="kw">.</span>sub msg <span class="dv">0</span> <span class="dv">9</span> <span class="kw">in</span>
<span class="dv">36</span>          <span class="kw">if</span> modify = <span class="st">&quot;set name:&quot;</span>
<span class="dv">37</span>          <span class="kw">then</span> <span class="kw">begin</span>
<span class="dv">38</span>            <span class="kw">let</span> as_string = Js<span class="kw">.</span><span class="dt">string</span> (String<span class="kw">.</span>trim msg) <span class="kw">in</span>
<span class="dv">39</span>            <span class="kw">let</span> chopped =
<span class="dv">40</span>              as_string##split (Js<span class="kw">.</span><span class="dt">string</span> <span class="st">&quot;:&quot;</span>) |&gt; to_string_list |&gt; Array<span class="kw">.</span>of_list
<span class="dv">41</span>            <span class="kw">in</span>
<span class="dv">42</span>            user_name := chopped.(<span class="dv">1</span>)
<span class="dv">43</span>          <span class="kw">end</span>
<span class="dv">44</span>        <span class="kw">end</span>;
<span class="dv">45</span>  
<span class="dv">46</span>        <span class="kw">let</span> msg = Printf<span class="kw">.</span>sprintf <span class="st">&quot;%s&gt;&gt;&gt;%s&quot;</span> !user_name (b#to_string ()) <span class="kw">in</span>
<span class="dv">47</span>        <span class="kw">let</span> total_message = (<span class="kw">object</span>%js
<span class="dv">48</span>          <span class="kw">val</span> id = !user_name |&gt; to_js_str
<span class="dv">49</span>          <span class="kw">val</span> message = msg |&gt; to_js_str
<span class="dv">50</span>          <span class="kw">end</span>) |&gt; stringify
<span class="dv">51</span>        <span class="kw">in</span>
<span class="dv">52</span>        sender#send
<span class="dv">53</span>          ~offset:<span class="dv">0</span>
<span class="dv">54</span>          ~length:(String<span class="kw">.</span>length total_message)
<span class="dv">55</span>          ~port
<span class="dv">56</span>          ~dest_address:multicast_addr
<span class="dv">57</span>          (<span class="dt">String</span> total_message)
<span class="dv">58</span>      <span class="kw">end</span></code></pre></div>
<p><strong>Create a site and render directly from jade templates</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">open</span> Nodejs

<span class="kw">let</span> () =
  <span class="kw">let</span> exp = <span class="kw">new</span> Express<span class="kw">.</span>express <span class="kw">in</span>
  <span class="kw">let</span> app = <span class="kw">new</span> Express<span class="kw">.</span>app ~existing:<span class="dt">None</span> <span class="kw">in</span>

  app#set_app_value (<span class="dt">`View_engine</span> <span class="st">&quot;jade&quot;</span>);
  app#use (exp#static <span class="st">&quot;.&quot;</span>);
  app#get ~path:<span class="st">&quot;/&quot;</span> (<span class="kw">fun</span> _ res -&gt; res#render <span class="st">&quot;index.jade&quot;</span>);

  app#listen ~port:<span class="dv">8080</span></code></pre></div>
<p><strong>Create a raw server from the Net module</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> () =
  <span class="kw">let</span> server = Net<span class="kw">.</span>create_server ~conn_listener:<span class="kw">begin</span> <span class="kw">fun</span> sock -&gt;
      sock#on_end (<span class="kw">fun</span> () -&gt; print_endline <span class="st">&quot;client disconnected&quot;</span>);
      sock#write <span class="st">&quot;Hello</span><span class="ch">\r\n</span><span class="st">&quot;</span>;
      sock &gt;|&gt; sock |&gt; ignore
    <span class="kw">end</span> ()
  <span class="kw">in</span>
  server#listen ~port:<span class="dv">8124</span> <span class="kw">begin</span> <span class="kw">fun</span> () -&gt;
    <span class="kw">let</span> info = server#address <span class="kw">in</span>
    print_endline info.Net<span class="kw">.</span>address;
    print_endline (info.Net<span class="kw">.</span>ip_family |&gt; string_of_ip);
    print_endline (info.Net<span class="kw">.</span>port |&gt; string_of_int);
    print_endline <span class="st">&quot;started server&quot;</span>
  <span class="kw">end</span></code></pre></div>
<p><strong>Create a file stream, gzip it, write it</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="dv">1</span>  <span class="ot">open</span> Nodejs
<span class="dv">2</span>  
<span class="dv">3</span>  <span class="kw">let</span> _ =
<span class="dv">4</span>    Fs<span class="kw">.</span>create_read_stream <span class="st">&quot;code.ml&quot;</span> &gt;|&gt;
<span class="dv">5</span>    Zlib<span class="kw">.</span>create_gzip () &gt;|&gt;
<span class="dv">6</span>    Fs<span class="kw">.</span>create_write_stream <span class="st">&quot;NEWCODE_TEST.ml&quot;</span></code></pre></div>
<p><strong>Typed Decoding of Buffers</strong></p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">open</span> Nodejs

<span class="kw">let</span> () =
  <span class="kw">let</span> string_decoder = <span class="kw">new</span> String_decoder<span class="kw">.</span>decoder <span class="dt">Utf_8</span> <span class="kw">in</span>
  <span class="kw">let</span> cent = <span class="kw">new</span> Buffer<span class="kw">.</span>buffer (<span class="dt">`Array</span> [|<span class="bn">0xE2</span>; <span class="bn">0x82</span>; <span class="bn">0xAC</span>|]) <span class="kw">in</span>
  (string_decoder#write cent) |&gt; print_endline</code></pre></div>
<p>This one is a bit more low level as it its a general idea of how these bindings are implemented.</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"> <span class="dv">1</span>  <span class="co">(* Assume this file is called c.ml *)</span>
 <span class="dv">2</span>  <span class="ot">open</span> Nodejs
 <span class="dv">3</span>  
 <span class="dv">4</span>  <span class="kw">class</span> child_process = <span class="kw">object</span>
 <span class="dv">5</span>  
 <span class="dv">6</span>    <span class="kw">val</span> raw_js = require_module <span class="st">&quot;child_process&quot;</span>
 <span class="dv">7</span>  
 <span class="dv">8</span>    <span class="co">(* Clearly not finished *)</span>
 <span class="dv">9</span>    <span class="kw">method</span> spawn_sync cmd args : (<span class="dt">string</span> * <span class="dt">string</span>) <span class="dt">list</span> =
<span class="dv">10</span>      <span class="kw">let</span> handle =
<span class="dv">11</span>        [|i (Js<span class="kw">.</span><span class="dt">string</span> cmd);
<span class="dv">12</span>          i (List<span class="kw">.</span>map Js<span class="kw">.</span><span class="dt">string</span> args |&gt; Array<span class="kw">.</span>of_list |&gt; Js<span class="kw">.</span><span class="dt">array</span>)|]
<span class="dv">13</span>        |&gt; m raw_js <span class="st">&quot;spawnSync&quot;</span>
<span class="dv">14</span>      <span class="kw">in</span>
<span class="dv">15</span>      (handle &lt;!&gt; <span class="st">&quot;envPairs&quot;</span>)
<span class="dv">16</span>      |&gt; Js<span class="kw">.</span>to_array |&gt; Array<span class="kw">.</span>map <span class="kw">begin</span> <span class="kw">fun</span> (s : Js<span class="kw">.</span>js_string Js<span class="kw">.</span>t) -&gt;
<span class="dv">17</span>        <span class="kw">let</span> chop = s##split (Js<span class="kw">.</span><span class="dt">string</span> <span class="st">&quot;=&quot;</span>) |&gt; to_string_list |&gt; Array<span class="kw">.</span>of_list <span class="kw">in</span>
<span class="dv">18</span>        (chop.(<span class="dv">0</span>), chop.(<span class="dv">1</span>))
<span class="dv">19</span>      <span class="kw">end</span>
<span class="dv">20</span>      |&gt; Array<span class="kw">.</span>to_list
<span class="dv">21</span>  
<span class="dv">22</span>  <span class="kw">end</span>
<span class="dv">23</span>  
<span class="dv">24</span>  <span class="kw">let</span> () =
<span class="dv">25</span>    <span class="kw">let</span> ls_proc = (<span class="kw">new</span> child_process)#spawn_sync <span class="st">&quot;ls&quot;</span> [] <span class="kw">in</span>
<span class="dv">26</span>    ls_proc |&gt; List<span class="kw">.</span>iter <span class="kw">begin</span> <span class="kw">fun</span> (key, value) -&gt;
<span class="dv">27</span>      Printf<span class="kw">.</span>sprintf <span class="st">&quot;Key was: %s and value: %s&quot;</span> key value
<span class="dv">28</span>      |&gt; print_endline
<span class="dv">29</span>    <span class="kw">end</span></code></pre></div>
<p>(Line one comes from my <code>nodejs</code> package, install it with <code>opam install nodejs</code>).</p>
<p>This example is a subset of my bindings to the builtin node module, <a href="https://nodejs.org/api/child_process.html">child_process</a>. Here we spawn a separate process and create an OCaml <code>alist</code> out of the environment variables of the spawned process. A point of interest is the poverty of OCaml StdLib’s <code>String</code> module, so much so that I get more functionality out of JavaScript’s string methods! (There’s no split in the StdLib).</p>
<p>To actually run this code you’ll need to do:</p>
<pre class="shell"><code>$ ocamlfind ocamlc c.ml -linkpkg -package nodejs -o T.out
$ js_of_ocaml T.out
$ node T.js</code></pre>
<h1 id="projects">Projects</h1>
<p>This approach surprisingly works and I’ve written similar bindings to <a href="https://github.com/fxfactorial/ocaml-npm-socket-io">socket.io</a> for which I have a working chat server:</p>
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="ot">open</span> Nodejs

<span class="kw">let</span> () =
  <span class="kw">let</span> io = Socket_io<span class="kw">.</span>require () <span class="kw">in</span>
  <span class="kw">let</span> server =
    Http<span class="kw">.</span>create_server <span class="kw">begin</span> <span class="kw">fun</span> incoming response -&gt;

      Fs<span class="kw">.</span>read_file ~path:<span class="st">&quot;./client.html&quot;</span> <span class="kw">begin</span> <span class="kw">fun</span> err data -&gt;
        response#write_head ~status_code:<span class="dv">200</span> [(<span class="st">&quot;Content-type&quot;</span>, <span class="st">&quot;text/html&quot;</span>)];
        response#end_ ~data:(Http<span class="kw">.</span><span class="dt">String</span> data) ()

      <span class="kw">end</span>
    <span class="kw">end</span>
  <span class="kw">in</span>
  <span class="kw">let</span> app = server#listen ~port:<span class="dv">8080</span> <span class="kw">begin</span> <span class="kw">fun</span> () -&gt;
      Printf<span class="kw">.</span>sprintf
        <span class="st">&quot;Started Server and Running node: %s&quot;</span> (<span class="kw">new</span> process#version)
      |&gt; print_endline
    <span class="kw">end</span>
  <span class="kw">in</span>

  <span class="kw">let</span> io = io#listen app <span class="kw">in</span>
  io#sockets#on_connection <span class="kw">begin</span> <span class="kw">fun</span> socket -&gt;

    socket#on <span class="st">&quot;message_to_server&quot;</span> <span class="kw">begin</span> <span class="kw">fun</span> data -&gt;

      io#sockets#emit
        ~event_name:<span class="st">&quot;message_to_client&quot;</span>
        !!(<span class="kw">object</span>%js <span class="kw">val</span> message = data &lt;!&gt; <span class="st">&quot;message&quot;</span> <span class="kw">end</span>)

    <span class="kw">end</span>
  <span class="kw">end</span></code></pre></div>
<p>Notice the features of OCaml that don’t exist in JavaScript at all, like named parameters.</p>
<p>Another project in this vein are my bindings to Github’s <code>Electron</code> project, here’s a project I did with a friend using Basecamp’s recently released <code>Trix</code> editor.</p>
<div class="figure">
<img src="./electron_working.gif" alt="img" />
<p class="caption">img</p>
</div>
<h1 id="like-what-you-see">Like what you see?</h1>
<p>Writing out these bindings is a bit of work, Node’s API is pretty big in addition to third party code like socket.io, express, and Electron. Much of these bindings are quite formulaic, although some ideas don’t easily match up between the OCaml and JavaScript boundary, like <code>varargs</code> so that requires some more thought at times.</p>
<p>To any reader interested in OCaml open-source or for whatever reason, send me a PR, its mostly an issue of translating <a href="https://nodejs.org/api/index.html">the Node API</a> into the equivalent bindings:</p>
<p><a href="https://github.com/fxfactorial/ocaml-nodejs">nodejs repo</a></p>
<p><a href="https://github.com/fxfactorial/ocaml-electron">electron repo</a></p>]]></description>
    <pubDate>Thu, 03 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://hyegar.com/2015/12/03/write_ocaml_on_node/index.html</guid>
    <dc:creator>Edgar Aroutiounian</dc:creator>
</item>

    </channel>
</rss>
