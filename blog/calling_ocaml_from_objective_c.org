#+TITLE:       Calling OCaml from Objective-C on the iPhone
#+AUTHOR:      Edgar Aroutiounian
#+EMAIL:       edgar.factorial@gmail.com
#+DATE:        2016-01-23 Sat
#+URI:         /blog/%y/%m/%d/calling-ocaml-from-objective-c-on-the-iphone
#+KEYWORDS:    objective-c, ocaml, iphone
#+TAGS:        objective-c, iphone, ocaml
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: OCaml and Objective-C

I love iOS and I love OCaml, so I've packaged up an OCaml compiler for
iOS via opam. Now all you need to build OCaml programs on the iPhone
is opam!

* First steps
You'll need the cross compiler. Follow the README instructions
mentioned [[https://github.com/fxfactorial/opam-ios][here]]. This will provide you with the cross compiler based on
OCaml 4.02.0.

* Example Code
Now I'll show you an example of calling OCaml from Objective-C. Much
of this code will have simplifications as its an example for getting
you started. Also note that dealing at the C level and the OCaml
runtime can be tricky and is not for beginners. 

Here's the OCaml code first, assume it is named code.ml

#+BEGIN_SRC ocaml -n 
let make_string () =
  print_endline "Hello Word from OCaml";
  "Hello World "

let () =
  Callback.register "make_string" make_string
#+END_SRC

We're essentially telling the runtime to make this function
available to grab as a handle, in this case it's a handle on a
closure.

And now the Objective-C code, assume it is named main.c

#+BEGIN_SRC objective-c -n
#define CAML_NAME_SPACE

#import <Foundation/Foundation.h>

#include <caml/callback.h>
#include <caml/mlvalues.h>

int main (int argc, char **argv)
{
  caml_startup(argv);
  caml_callback(*caml_named_value("make_string"), Val_unit);
  NSLog(@"Now using objective-c code");
  return 0;
}
#+END_SRC

Its important to call ~caml_startup~ before any OCaml callbacks. Then
we get a handle on the closure and call it with unit.

To compile this code you'll need the cross-compiler which was
installed by following the directions on my opam-ios repo, the command
you use is:

#+BEGIN_SRC shell 
$ ocamloptrev -rev 8.3 -ccopt -ObjC -cclib '-framework Foundation' main.c code.ml -o F
#+END_SRC

The 8.3 is the iOS SDK you want to link against, again see the README
on the github repo for opam-ios for more details.

The output we get, ~F~ is an arm executable, when we run it on the
iPhone we will get an output of:

#+BEGIN_SRC shell
$ some_iphone :~/  ./F
Hello Word from OCaml
2016-01-23 22:44:04.889 F[1977:507] Now using objective-c code
#+END_SRC

Yay!
